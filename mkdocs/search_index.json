{
    "docs": [
        {
            "location": "/", 
            "text": "LSCC Documentation\n\n\nContents\n\n\n\n\nTutorials and Protocols", 
            "title": "Home"
        }, 
        {
            "location": "/#lscc-documentation", 
            "text": "", 
            "title": "LSCC Documentation"
        }, 
        {
            "location": "/#contents", 
            "text": "Tutorials and Protocols", 
            "title": "Contents"
        }, 
        {
            "location": "/tutorials/hpc/", 
            "text": "em {font-style: normal; font-family: courier new;}\n\n\n\nHigh-Performance Computing\n\n\nA hands-on-workshop covering High-Performance Computing (HPC).\n\n\nThis workshop assumes you have a basic understanding of the Unix Operating System.  If not, then you should take\na look at the \nHands-on Unix Workshop\n\n\n\n\nIntroduction\n\n\nBefore we commence the hands-on part of this workshop we will first give a short 30 minute talk to introduce the High Performance Computing concepts. \nThe \nslides\n are available if you would like.  Additionally the following reference material is available for later\nuse.\n\n\n\n\n\n\nReference Material\n\n\n\n\nWhat is an HPC?\n\n\nAn HPC is simply a large collection of server-grade computers working together to solve large problems.\n\n\n\n\nBig\n: HPCs typically have lots of CPUs and Memory and consequently large jobs.\n\n\nShared\n: There are usually lots of users making use of it at one time\n\n\nCoordinated\n: There is a coordinator program to ensure fair-use between its users\n\n\nCompute Collection\n: HPCs use a number of computers at once to solve lots of large jobs\n\n\n\n\n\n\nFigure\n: The user (face at top) interacts with their local PC/Laptop through the keyboard and screen.  The PC/Laptop will \nconnect to the Head/Login node of the HPC interactively.  The Head/Login node will send the jobs off to the Compute Nodes when\none is available. \n\n\nWhy use HPCs?\n\n\nThe main reason we use HPCs is because they are quite big.  Given their size, they are usually very expensive, however through \nsharing the resources the per user/job cost can be kept low.\n\n\n\n\nMany CPUs\n: HPCs typically have 100's to 10000's of CPUs.  Compare this with the 4 or 8 that your PC/Laptop might have.\n\n\nLarge Memory\n: 100's of GBs to multiple TBs of RAM are typical for each node.\n\n\nEfficient use\n: through sharing the resources each user can have access to a very large computer for a period and hand \nit back for others to use later.\n\n\n\n\nSoftware Modules\n\n\nThere are typically 100's to 1000's of software packages installed on an HPC.  Given that each can have its own special \nrequirements and multiple versions will be made, Software on the HPC will most commonly be packaged and only made available \nto you when you request it.\n\n\n\n\nPackaged\n: to avoid conflicts between software, each is packaged up into a module and only used on demand.\n\n\nLoadable\n: before using a software module you need to load it.\n\n\nVersions\n: given not all users want to use the same version of software (and to compare new results with old you might \n   need the same version)    each version is made into its own software module so you have ultimate control.\n\n\n\n\nJob Submission\n\n\nJob Submission is the process of instructing the HPC to perform a task for you.  Depending on the HPC software installed on \nyour HPC, the process of doing so might be different.\n\n\n\n\nSLURM\n: this workshop uses an HPC that uses the SLURM HPC software.  Some common alternatives (not covered) are PBS or \n   SGE/OGE\n\n\nQueues (Partition)\n: when a job is submitted it is added to a work queue; in SLURM this is called a Partition.\n\n\nBatch\n: HPC jobs are not 'interactive'.  By this we mean, you can't type input into your job's programs and you won't \n   immediately see the output that your program prints on the screen. \n\n\n\n\nResources\n\n\nSo that SLURM knows how to schedule and fit jobs around each other, you need to specify what resources your job will use.\nThat is, you need to tell it how many CPUs, RAM, Nodes (servers), and Time you need.\n\n\n\n\nCPUs\n: most software is limited using 1 CPU by default but many can use more than one (or you can run multiple copies at once).\n   The number of CPUs you specify needs to match how many things your software can do at once.\n\n\nMemory\n: you need to estimate (or guess) how much memory (RAM) your program needs.\n\n\nNodes\n: most software will only use one of the HPC's Nodes (i.e. One server) however some software can make use of more than\n   one to solve the problem sooner.\n\n\nTime\n: like when you are scheduling meetings, SLURM needs to know how long each job will take (maximum) so it can organise\n   other jobs afterwards.\n\n\n\n\nJob Types\n\n\nThere are two types of jobs that you can submit:\n\n\n\n\nShared\n: a shared job (as the name suggests) is one that shares a node with other jobs.  This is the default and preferred method.\n\n\nExclusive\n: an exclusive job gets a single (or multiple) nodes to itself.  Given this exclusivity, this type of job must know how \n   to use multiple CPUs as most HPCs will have at least 16 CPUs per node.\n\n\n\n\n\n\n\n\n\n\n(function(w,d,u){if(!w.$){w._delayed=true;console.info(\"Delaying JQuery calls\");w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}}})(window,document)\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink0\").click(function(e){\n            e.preventDefault();\n            $(\"#showable0\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nConnecting to HPC\n\n\nTo begin this workshop you will need to connect to an HPC.  Today we will use the \nBARCOO\n.  The computer called\n\n\nbarcoo.vlsci.unimelb.edu.au\n  is the \none that coordinates all the HPCs tasks.\n\n\nServer details\n:\n\n\n\n\nhost\n: \nbarcoo.vlsci.unimelb.edu.au\n\n\nport\n: \n22\n \n\n\nusername\n: \ntrainXX\n\n\npassword\n: \n(provided at workshop)\n\n\n\n\nConnection instructions\n:\n\n\n\n\n\n\nMac OS X / Linux\n\n\n\n\nBoth Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into \nBARCOO\n, for example, type this command at \nthe prompt and press return (where the word username is replaced with your \nBARCOO\n username):\n\n\n$ ssh  \ntrainXX\n@\nbarcoo.vlsci.unimelb.edu.au\n\n\nThe same procedure works for any other machine where you have an account except that if your Unix computer uses a port other than 22 you will\nneed to specify the port by adding the option \n-p PORT\n with PORT substituted with the port number.\n\n\nYou may be presented with a message along the lines of:\n\n\nThe authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?\n\n\n\n\nAlthough you should never ignore a warning, this particular one is nothing to be concerned about; type \nyes\n and then \npress enter\n. \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nWindows\n\n\n\n\nOn Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\n\n\nDocumentation for using PuTTY is here:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html\n\n\nWhen you start PuTTY you should see a window which looks something like this:\n\n\n\n\nTo connect to \nBARCOO\n you should enter \nbarcoo.vlsci.unimelb.edu.au\n into the box entitled \"Host Name (or IP address)\" \nand \n22\n in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).\n\n\nIn some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof \n\"The server's host key is not cached in the registry\"\n. This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.\n\n\nIf all goes well, a terminal window will open, showing a prompt with the text \n\"login as:\"\n. An example terminal window is shown \nbelow. You should type your \nBARCOO\n username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink2\").click(function(e){\n            e.preventDefault();\n            $(\"#showable2\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 1: Exploring an HPC\n\n\nAn HPC (short for 'High Performance Computer') is simply a collection of Server Grade computers that work together to solve large problems.\n\n\n\n\nFigure\n: Overview of the computers involved when using an HPC.  Computer systems are shown in rectangles and arrows represent interactions.\n\n\nExercises\n\n\n\n\n\n\n1.1) What is the contact email for your HPC's System Administrator?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWhen you login, you will be presented with a message; this is called the \nMessage Of The Day\n and usually includes lots of useful \ninformation.  On \nBARCOO\n this includes a list of useful commands, the last login details for your account and \nthe contact email of the system administrator\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink4\").click(function(e){\n            e.preventDefault();\n            $(\"#showable4\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nDepending on which computer you are working:\n\n\n\n\nSNOWY \n BARCOO: help@vlsci.unimelb.edu.au\n\n\nLIMS-HPC: genomics@latrobe.edu.au\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink5\").click(function(e){\n            e.preventDefault();\n            $(\"#showable5\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n1.2) Run the \nsinfo\n command.  How many nodes are there in this hpc?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe \nbarcoo\n[2-4]\n is shorthand for \nbarcoo\n2 \nbarcoo\n3 and \nbarcoo\n4\n and \nbarcoo\n[1,5]\n is shorthand for\n\nbarcoo\n1\n and \nbarcoo\n5\n\n\n\n\n\n\nmore\n\n\n\n\nHave a look at the NODELIST column.  Only count each node once.\n\n\n$ sinfo\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ncompute*     up 200-00:00:      3    mix lims-hpc-[2-4]\ncompute*     up 200-00:00:      2   idle lims-hpc-[1,5]\nbigmem       up 200-00:00:      1   idle lims-hpc-1\n8hour        up   08:00:00      3    mix lims-hpc-[2-4]\n8hour        up   08:00:00      3   idle lims-hpc-[1,5],lims-hpc-m\n\n\n\n\nNOTE: the above list will vary depending on the HPC setup.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink8\").click(function(e){\n            e.preventDefault();\n            $(\"#showable8\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable8\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink8\").text(\"more\");\n            } else {\n                $(\"#showablelink8\").text(\"less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink7\").click(function(e){\n            e.preventDefault();\n            $(\"#showable7\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \nsinfo\n command lists all available partitions and the status of each node within them.  If you count up the names of nodes \n(uniquely) you will get the total nodes in this cluster.  \n\n\n\n\nBARCOO: \n70\n (\nbarcoo001\n through \nbarcoo070\n)\n\n\nSNOWY: \n43\n (\nsnowy001\n through \nsnowy043\n)\n\n\nLIMS-HPC: \n6\n (\nlims-hpc-m\n and \nlims-hpc-1\n through \nlims-hpc-5\n)\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink9\").click(function(e){\n            e.preventDefault();\n            $(\"#showable9\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAlternate Method\n\n\n\n\nAn automatic (though more complex) way would have been running the following command:\n\n\n$ scontrol show node | grep NodeName | wc -l\n\n\n\n\nWhere:\n\n\n\n\nscontrol show node\n: lists details of all nodes (over multiple lines)\n\n\ngrep NodeName\n: only shows the NodeName line\n\n\nwc -l\n: counts the number of lines\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink10\").click(function(e){\n            e.preventDefault();\n            $(\"#showable10\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 2: Software Modules\n\n\nUp to this point we have been using only standard Unix software packages which are included with Linux/Unix computers.\nLarge computing systems such as HPCs often use a system of modules to load specific software packages (and versions)\nwhen needed for the user.\n\n\nIn this topic we will discover what science software modules (tools) are available and load them ready for analysis.\n\n\nThis topic uses the \nman\n and \nmodule\n commands heavily\n\n\nExercises\n\n\n\n\n\n\n2.1) What happens if you run the \nmodule\n command without any options / arguments?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nLiterally type \nmodule\n and press \nENTER\n key.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink12\").click(function(e){\n            e.preventDefault();\n            $(\"#showable12\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: It prints an error followed by a list of available options / flags\n\n\n$ module\ncmdModule.c(166):ERROR:11: Usage is 'module command  [arguments ...] '\n\n  Modules Release 3.2.10 2012-12-21 (Copyright GNU GPL v2 1991):\n\n  Usage: module [ switches ] [ subcommand ] [subcommand-args ]\n\nSwitches:\n    -H|--help       this usage info\n    -V|--version        modules version \n configuration options\n    -f|--force      force active dependency resolution\n    -t|--terse      terse    format avail and list format\n    -l|--long       long     format avail and list format\n    -h|--human      readable format avail and list format\n    -v|--verbose        enable  verbose messages\n    -s|--silent     disable verbose messages\n    -c|--create     create caches for avail and apropos\n    -i|--icase      case insensitive\n    -u|--userlvl \nlvl\n  set user level to (nov[ice],exp[ert],adv[anced])\n  Available SubCommands and Args:\n    + add|load      modulefile [modulefile ...]\n    + rm|unload     modulefile [modulefile ...]\n    + switch|swap       [modulefile1] modulefile2\n    + display|show      modulefile [modulefile ...]\n    + avail         [modulefile [modulefile ...]]\n    + use [-a|--append] dir [dir ...]\n    + unuse         dir [dir ...]\n    + update\n    + refresh\n    + purge\n    + list\n    + clear\n    + help          [modulefile [modulefile ...]]\n    + whatis        [modulefile [modulefile ...]]\n    + apropos|keyword   string\n    + initadd       modulefile [modulefile ...]\n    + initprepend       modulefile [modulefile ...]\n    + initrm        modulefile [modulefile ...]\n    + initswitch        modulefile1 modulefile2\n    + initlist\n    + initclear\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink13\").click(function(e){\n            e.preventDefault();\n            $(\"#showable13\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.2) How do you find a list of \navailable\n software?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTry the \nmodule\n command.  Don't forget the \nman\n command to get help for a command\n\n\n\n\n\n\nMore\n\n\n\n\nRun the command \nman module\n\n\nUse a search to find out about the \navail\n subcommand (e.g. /avail\nenter\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink16\").click(function(e){\n            e.preventDefault();\n            $(\"#showable16\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable16\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink16\").text(\"More\");\n            } else {\n                $(\"#showablelink16\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink15\").click(function(e){\n            e.preventDefault();\n            $(\"#showable15\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe module command is used to show details of software modules (tools).\n\n\nAnswer\n:\n\n\n$ module avail\n\n------------------- /usr/share/Modules/modulefiles --------------------\ndot         module-git  module-info modules     null        use.own\n\n------------------- /usr/local/Modules/modulefiles --------------------\nacana/1.60                         mafft-gcc/7.215\naftrrad/4.1.20150201               malt/0.1.0\narlequin/3.5.1.3                   matplotlib-gcc/1.3.1\n...\n\n\n\n\nThe modules list has been shortened because it is very long.  The modules after the \n/usr/local/Modules/modulefiles\n line\nare the science software; before this are a few built-in ones that you can ignore.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink17\").click(function(e){\n            e.preventDefault();\n            $(\"#showable17\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.3) How many modules are there starting with '\nf\n'?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRun the command \nman module\n\n\nUse a search to find out about the \navail\n subcommand (e.g. /avail\nenter\n).  You may have to press 'n' a few times\nto reach the section where the it describes the \navail\n subcommand.\n\n\n\n\n\n\nMore\n\n\n\n\n\n\nIf an argument is given, then each directory in the MODULEPATH is searched for modulefiles\nwhose pathname match the argument\n\n\n\n\nThis is a quote from the manual page for the module command explaining the avail subcommand.  It uses rather technical \nlanguage but basically it's saying you can put search terms after the avail subcommand when entering the command.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink20\").click(function(e){\n            e.preventDefault();\n            $(\"#showable20\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable20\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink20\").text(\"More\");\n            } else {\n                $(\"#showablelink20\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink19\").click(function(e){\n            e.preventDefault();\n            $(\"#showable19\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe man page told us that we could put a search term after \nmodule avail\n.\n\n\n$ module avail f\n------------------- /usr/local/Modules/modulefiles -------------------\nfasta-gcc/35.4.12            flex-gcc/2.5.39\nfastqc/0.10.1                fontconfig-gcc/2.11.93\nfastStructure-gcc/2013.11.07 freebayes-gcc/20140603\nfastStructure-gcc/20150320   freetype-gcc/2.5.3\nfastx_toolkit-gcc/0.0.14\n\n\n\n\n\n\nAnswer\n: 26 modules\n\n\n\n\nNOTE: this was correct at time of writing this workshop and might increase over time so don't be alarmed if you got more\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink21\").click(function(e){\n            e.preventDefault();\n            $(\"#showable21\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAlternate Method\n\n\n\n\nTo get a fully automated solution your could do the following command:\n\n\n$ module -l avail 2\n1 | grep \n^f\n | wc -l\n\n\n\n\nWhere:\n\n\n\n\nmodule -l avail\n: lists all modules (in long format, i.e. one per line)\n\n\n2\n1\n: merges output from \nstandard error\n to the \nstandard output\n so it can be feed into grep.  For some reason the\ndevelopers of the \nmodule\n command thought it was a good idea to output the module names on the \nerror\n stream rather than\nthe logical \noutput\n stream.\n\n\ngrep \"^f\"\n: only shows lines beginning with \nf\n\n\nwc -l\n: counts the number of lines\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink22\").click(function(e){\n            e.preventDefault();\n            $(\"#showable22\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.4) Run the \npear\n command (without loading it), does it work?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThis question is very literal\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink24\").click(function(e){\n            e.preventDefault();\n            $(\"#showable24\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ pear\n-bash: pear: command not found\n\n\n\n\nThe error you see is from BASH, it is complaining that it doesn't know anything about a command called 'pear'\n\n\nAnswer\n: No, command not found\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink25\").click(function(e){\n            e.preventDefault();\n            $(\"#showable25\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.5) How would we \nload\n the \npear\n module?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck the man page for \nmodule\n again and look for a subcommand that might load modules; it is quite literal as well.\n\n\n\n\n\n\nMore\n\n\n\n\nRun the command \nman module\n\n\nUse a search to find out about the \nload\n subcommand (e.g. /load\nenter\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink28\").click(function(e){\n            e.preventDefault();\n            $(\"#showable28\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable28\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink28\").text(\"More\");\n            } else {\n                $(\"#showablelink28\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink27\").click(function(e){\n            e.preventDefault();\n            $(\"#showable27\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ module load pear-gcc/0.9.4\n\n\n\n\n-gcc | -intel\n: Lots of modules will have either \n-gcc\n or \n-intel\n after the software name.  This refers to the compiler that\nwas used to make the software.  If you have a choice then usually the \n-intel\n one will be faster.\n\n\n\nVERSIONS\n: \nmodule load pear-gcc\n would have been sufficient to load the module however it is best-practice (in science) to specify the \nversion number so that the answer you get today will be the answer you get in 1 year time.  Some software will produce different results with different versions\nof the software.\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink29\").click(function(e){\n            e.preventDefault();\n            $(\"#showable29\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.6) Now it's \nload\ned, run pear again, what does it do?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe paper citation gives a clue.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink31\").click(function(e){\n            e.preventDefault();\n            $(\"#showable31\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ module load pear-gcc/0.9.4\n$ pear\n ____  _____    _    ____ \n|  _ \\| ____|  / \\  |  _ \\\n| |_) |  _|   / _ \\ | |_) |\n|  __/| |___ / ___ \\|  _ \n\n|_|   |_____/_/   \\_\\_| \\_\\\nPEAR v0.9.4 [August 8, 2014]  - [+bzlib]\n\nCitation - PEAR: a fast and accurate Illumina Paired-End reAd mergeR\nZhang et al (2014) Bioinformatics 30(5): 614-620 | doi:10.1093/bioinformatics/btt593\n\n... REST REMOVED ...\n\n\n\n\nAnswer\n: \"PEAR: a fast and accurate Illumina Paired-End reAd mergeR\" (i.e. merges paired dna reads into a single read when they overlap)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink32\").click(function(e){\n            e.preventDefault();\n            $(\"#showable32\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.7) \nList\n all the loaded modules. How many are there? Where did all the others come from?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse man to find a subcommand that will list currently loaded modules.\n\n\nWe are not really expecting you to be able to answer the 2nd question however if you do get it correct then well-done, that was very tough.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink34\").click(function(e){\n            e.preventDefault();\n            $(\"#showable34\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n \nList\n all the loaded modules. How many are there?\n\n\n$ module list\nCurrently Loaded Modulefiles:\n  1) gmp/5.1.3         3) mpc/1.0.2         5) bzip2-gcc/1.0.6\n  2) mpfr/3.1.2        4) gcc/4.8.2         6) pear-gcc/0.9.4\n\n\n\n\nAnswer\n: 6\n\n\nWhere did all the others come from?\n\n\nYou may have noticed when we loaded \npear-gcc\n the module called \ngcc\n was also loaded; this gives a hint as to where the others come from.\n\n\nAnswer\n: They are \ndependencies\n; that is, they are supporting software that is used by the module we loaded.  Additionally, some HPC's \nautomatically load some modules for you when you login.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink35\").click(function(e){\n            e.preventDefault();\n            $(\"#showable35\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.8) How do you undo the loading of the \npear\n module?  List the loaded modules again, did they all disappear?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nComputer Scientists are not always inventive with naming commands, try something starting with \nun\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink37\").click(function(e){\n            e.preventDefault();\n            $(\"#showable37\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nHow do you undo the loading of the \npear\n module?\n\n\n$ module unload pear-gcc\n\n\n\n\nAnswer\n: the \nunload\n sub-command removes the named module from our current SSH session.\n\n\nList the loaded modules again, did they all disapear?\n\n\nAnswer\n: Unfortunately not, the module command is not smart enough to determine if any of the other modules that were loaded are still\nneeded or not so we will need to do it manually (or see next question) \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink38\").click(function(e){\n            e.preventDefault();\n            $(\"#showable38\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.9) How do you clear ALL loaded modules?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIt's easier than running \nunload\n for all modules\n\n\nThis one isn't that straight forward; try a \nsynonym\n of \nrid\n.\n\n\n\n\n\n\nMore\n\n\n\n\nWe will \npurge\n the list of loaded modules.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink41\").click(function(e){\n            e.preventDefault();\n            $(\"#showable41\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable41\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink41\").text(\"More\");\n            } else {\n                $(\"#showablelink41\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink40\").click(function(e){\n            e.preventDefault();\n            $(\"#showable40\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ module purge \n\n\n\n\nAnswer\n: running the \npurge\n sub-command will unload all modules you loaded (and all dependencies).\n\n\nAlternative\n: if you close your SSH connection and re-open it the new session will be blank as well.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink42\").click(function(e){\n            e.preventDefault();\n            $(\"#showable42\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nBEFORE CONTINUING\n: If you are using BARCOO or SNOWY you will need to load the default commands\nagain.  Do so by running \nmodule load vlsci\n\n\n\n\n\n\n\nTopic 3: Job Submission\n\n\nUp to this point in the workshop (and the previous Unix workshop) we have only used the head-node of the HPC.  While this is ok for small jobs \n it's unworkable for most jobs.  In this topic we will start to learn how to make use of the rest of the HPCs immense compute power\n\n\nBackground\n\n\nOn conventional Unix computers (such as the HPC headnode) we enter the commands we want to run at the terminal and see the results directly output\nin front of us.  On an HPC this type of computation will only make use of one node, namely, the \nHead Node\n.  To make use of the remaining (\ncompute\n) nodes\nwe need to use the SLURM software package (called an HPC Scheduler).  The purpose of SLURM is to manage all user jobs and distribute the available resources\n(i.e. time on the compute nodes) to each job in a fair manner.  You can think of the SLURM software as like an electronic \ncalendar\n and the user jobs like \n\nmeetings\n.  Users \nsay\n to SLURM \"I want XX CPUS for YY hours\" and SLURM will look at its current bookings and find the next available time it can fit the job.\n\n\nTerminology\n:\n\n\n\n\nNode\n: a server grade computer which is part of an HPC\n\n\nBatch Job\n: a group of one or more related Unix commands that need to be run (executed) for a user.  e.g. run fastqc on all my samples\n\n\nPartition (or Queue)\n: a list of jobs that need to be run.  There is often more than one partition on an HPC which usually have specific requirements \nfor the jobs that can be added to them.  e.g. \n8hour\n will accept jobs less than or equal to 8hours long\n\n\nRuntime\n: the amount of time a job is expected (or actually) runs\n\n\nResources\n: computation resources that can be given to our jobs in order to run them.  e.g. CPU Cores, Memory, and Time.\n\n\nJob Script\n: a special BASH script that SLURM uses to run a job on our behalf once resources become available.  Job scripts contain details of the \nresources that our commands need to run.\n\n\nOutput (or Results) file\n: When SLURM runs our batch job it will save the results that would normally be output on the terminal (screen) to a file; this file \nis called the output file.\n\n\nReservation\n: much like a reservation for a resturant holds a table for you, the administrator can give you an HPC reservation which holds various resources\nfor a period of time exclusively for you. \n\n\n\n\nExercises\n\n\nUseful Commands\n: \nman, sinfo, cat, sbatch, squeue, cp, module, prime\n\n\n\n\n\n\n3.1) Which nodes could a '\nmain\n' job go on?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTry the \nsinfo\n command\n\n\n\n\n\n\nmore\n\n\n\n\nHave a look at the PARTITION and NODELIST columns.  The \nbarcoo\n[2-4]\n is shorthand for \nbarcoo\n2 \nbarcoo\n3 \nand \nbarcoo\n4\n\n\n$ sinfo\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ncompute*     up 200-00:00:      3    mix lims-hpc-[2-4]\ncompute*     up 200-00:00:      2   idle lims-hpc-[1,5]\nbigmem       up 200-00:00:      1   idle lims-hpc-1\n8hour        up   08:00:00      3    mix lims-hpc-[2-4]\n8hour        up   08:00:00      3   idle lims-hpc-[1,5],lims-hpc-m\n\n\n\n\nNote: the output to the sinfo command will look different depending on which HPC you are using and it's current usage levels\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink45\").click(function(e){\n            e.preventDefault();\n            $(\"#showable45\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable45\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink45\").text(\"more\");\n            } else {\n                $(\"#showablelink45\").text(\"less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink44\").click(function(e){\n            e.preventDefault();\n            $(\"#showable44\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \nsinfo\n command will list the \npartitions\n.  It summaries the nodes by their current status so there may be more \nthan one line with \nmain\n in the partition column.  It lists the nodes in shorthand i.e. \nbarcoo\n[1,3-5] means \n\nbarcoo\n1, \nbarcoo\n3, \nbarcoo\n4, \nbarcoo\n5.\n\n\n\n\nAnswer\n: barcoo001, barcoo002, ..., barcoo070\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink46\").click(function(e){\n            e.preventDefault();\n            $(\"#showable46\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nQuestion 3.2 not possible on \nBARCOO\n, skipping it today\n\n\n\n\n\n\nUse the \ncat\n command to view the contents of \ntask01\n, \ntask02\n and \ntask03\n job script\n\n\n\n\n\n\n3.3) How many \ncpu cores\n will each ask for?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nLookup the man page for \nsbatch\n command.  \nsbatch\n's options match up with the \n#SBATCH\n comments at the top of each job \nscript.  Some will be affected by more than one option\n\n\n\n\n\n\nMore\n\n\n\n\nNon-exclusive (shared) jobs\n:\n\n\nIt is \n--cpus-per-task x --ntasks\n but if \n--ntasks\n is not present it defaults to 1 so its \n--cpus-per-task x 1\n\n\nExclusive jobs\n:\n\n\nThe \n--nodes\n options tells us how many nodes we ask for and the \n--exclusive\n option says give us all it has.  This\none is a bit tricky as we don't really know until it runs.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink49\").click(function(e){\n            e.preventDefault();\n            $(\"#showable49\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable49\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink49\").text(\"More\");\n            } else {\n                $(\"#showablelink49\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink48\").click(function(e){\n            e.preventDefault();\n            $(\"#showable48\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n:\n\n\n\n\ntask01: \n1 cpu core\n\n\ntask02: \n6 cpu cores\n\n\ntask03: \nat least 1\n as this has requested all cpu cores on the node its running on (\n--exclusive\n).\n\nHowever, since we know that all nodes on \nBARCOO\n have 16, we know it will get 16.\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink50\").click(function(e){\n            e.preventDefault();\n            $(\"#showable50\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.4) What about total memory?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nLookup the man page for \nsbatch\n command.  \nsbatch\n's options match up with the \n#SBATCH\n comments at the top of each job \nscript.  Some will be affected by more than one option\n\n\n\n\n\n\nMore\n\n\n\n\nThe \n--mem-per-cpu\n OR \n--mem\n options are holding the answer to total memory.\n\n\nFor task01 and task02 the calculation is \n--mem-per-cpu x --cpus-per-task x --ntasks\n\n\nFor task03, like with the cpus cores question, we get all the memory available on the node we get allocated\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink53\").click(function(e){\n            e.preventDefault();\n            $(\"#showable53\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable53\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink53\").text(\"More\");\n            } else {\n                $(\"#showablelink53\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink52\").click(function(e){\n            e.preventDefault();\n            $(\"#showable52\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \n--mem-per-cpu\n OR \n--mem\n options are holding the answer to total memory.\n\n\nFor task01 and task02 the calculation is \n--mem-per-cpu x --ntasks x --cpus-per-task\n\n\nFor task03, like with the cpus cores question, we get all the memory available on the node we get allocated\n\n\nNOTE\n: it might be tempting to use the \n--mem\n option on non-exclusive (i.e. \n--share\n) jobs \nhowever this will \nNOT\n work since the meaning of \n--mem\n is \n\"go on a node with at least X MB of memory\"\n; it does \nnot actually allocate any of it to you so your job will get terminated once it tries to use any memory.\n\n\n\nAnswer\n:\n\n\n\n\n\n\ntask01: \n1024MB\n (1GB) i.e. 1024 x 1 x 1\n\n\ntask02: \n12288MB\n (12GB) i.e. 2048 x 3 x 2\n\n\ntask03: \nat least 1024MB\n (1GB).  The actual amount could be a lot more as most HPCs have 100GB+ per node \n\n\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink54\").click(function(e){\n            e.preventDefault();\n            $(\"#showable54\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.5) How long can each run for?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the \nman sbatch\n command to look up the time specification.  If you search for \n--time\n it will describe the formats it uses (i.e. type \n\n/--time\n and press enter)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink56\").click(function(e){\n            e.preventDefault();\n            $(\"#showable56\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \n--time\n option is what tells slurm how long your job will run for.\n\n\nAnswer\n:\n\n\n\n\ntask01: requests \n30:00 (30mins 0secs)\n, uses ~30secs\n\n\ntask02: requests \n5:00 (5mins 0secs)\n, uses ~5secs\n\n\ntask03: requests \n1:00 (1min 0secs)\n, uses ~30secs\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink57\").click(function(e){\n            e.preventDefault();\n            $(\"#showable57\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.6) Is this maximum, minimum or both runtime?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the \nman sbatch\n command to look up the time specification.  If you search for \n--time\n it will describe the formats it uses (i.e. type \n\n/--time\n and press enter)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink59\").click(function(e){\n            e.preventDefault();\n            $(\"#showable59\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThis is a maximum time.  Your job may finish early, at which point it hands back the resources for the next job.  However if it \ntries to run longer the HPC will terminate the job.\n\nHINT\n: when selecting a time for your job its best to estimate your job runtime to be close to \nwhat it actually uses as it can help the HPC scheduler 'fit' your job in between other jobs though be careful to allow enough \ntime.  If you think your job may not complete in time you can ask the system administrator of your HPC to add more time.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink60\").click(function(e){\n            e.preventDefault();\n            $(\"#showable60\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.7) Calculate the \n--time\n specification for the following runtimes:\n\n\n\n\n\n\n1h30m:\n--time=\n\n\n1m20s:\n--time=\n\n\n1.5days:\n--time=\n\n\n30m:\n--time=\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink61\").click(function(e){\n            e.preventDefault();\n            $(\"#showable61\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nUse the \nman sbatch\n command to look up the time specification.  If you search for \n--time\n it will describe the formats it uses (i.e. type \n\n/--time\n and press enter)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink62\").click(function(e){\n            e.preventDefault();\n            $(\"#showable62\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n1h30m:\n--time=01:30:00 (alternatively: 0-01:30)\n\n\n1m20s:\n--time=01:20\n\n\n1.5days:\n--time=1-12\n\n\n30m:\n--time=30\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink63\").click(function(e){\n            e.preventDefault();\n            $(\"#showable63\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.8) What do the following --time specifications mean?\n\n\n\n\n\n\n--time=12-00:20\n\n\n--time=45\n\n\n--time=00:30\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink64\").click(function(e){\n            e.preventDefault();\n            $(\"#showable64\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nUse the \nman sbatch\n command to look up the time specification.  If you search for \n--time\n it will describe the formats it uses (i.e. type \n\n/--time\n and press enter)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink65\").click(function(e){\n            e.preventDefault();\n            $(\"#showable65\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n--time=12-00:20\n12 days and 20 minutes\n\n\n--time=45\n45 minutes\n\n\n--time=00:30\n30 seconds\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink66\").click(function(e){\n            e.preventDefault();\n            $(\"#showable66\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nReservations\n\n\nBefore we continue, a quick note on reservations.  Reservations are not normally needed however sometimes we will, particularly \nwhen the HPC is busy.  To make use of a reservation you need to know its name and provide it with the \n--reservation\n option\n\n\n\n\nToday we use the \nAROBINSON_TRAINING1002\n reservation so that we have resources available to run our jobs.  Your\njobs will need to contain the line:\n\n\n#SBATCH --reservation=\nAROBINSON_TRAINING1002\n\n\n\n\n\n\n\n\nNow use sbatch to submit the \ntask01\n job:\n\n\n\n\n\n\n\n\n3.9) What job id was your job given?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the man page for the sbatch command.  The \nSynopsis\n at the top will give you an idea how to run it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink68\").click(function(e){\n            e.preventDefault();\n            $(\"#showable68\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ sbatch task01 \nSubmitted batch job 9998\n\n\n\n\nAnswer\n: it's unique for each job; in the above example mine was \n9998\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink69\").click(function(e){\n            e.preventDefault();\n            $(\"#showable69\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.10) Which node did your job go on?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe \nsqueue\n command shows you the currently running jobs.  If it's been longer than 30 seconds since you submitted it you might have to resubmit it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink71\").click(function(e){\n            e.preventDefault();\n            $(\"#showable71\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nsqueue\n command to show all jobs.  Search for your \njobid\n and look in the \nNODELIST\n column.\n\n\nNOTE\n: if there are lots of jobs you can use \nsqueue -u YOUR_USERNAME\n to only show your jobs, where \nYOUR_USERNAME is replaced with your actual username.\n\n\n\n$ sbatch task01\nSubmitted batch job 9999\n$ squeue -u training01\n JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n  9999   compute   task01 training  R       0:05      1 lims-hpc-2\n\n\n\n\nAnswer\n: it's dependent on node availability at time; in the above example mine was \nlims-hpc-2\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink72\").click(function(e){\n            e.preventDefault();\n            $(\"#showable72\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nAdvanced\n\n\n\n\n\n\n3.11) Make a copy of \ntask01\n and call it \nprime_numbers\n.  Make it load the training module and use the \nprime\n command to calculate prime \nnumbers for 20 seconds.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nYou can find the \nprime\n command in the \ntraining-gcc/1.0\n module\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink74\").click(function(e){\n            e.preventDefault();\n            $(\"#showable74\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe key points to change in the task01 script are:\n\n\n\n\nadding the \nmodule load training-gcc/1.0\n\n\nreplacing the \nsleep\n (and \necho\n) statements with a call to \nprime 20\n.\n\n\n\n\n\n\n#!/bin/bash\n#SBATCH --cpus-per-task=1\n#SBATCH --mem-per-cpu=1024\n#SBATCH --partition=PARTITION\n#SBATCH --time=30:00\n#SBATCH --reservation=RESERVATION\n\nmodule load training-gcc/1.0\n\necho \nStarting at: $(date)\n\nprime 20\necho \nFinished at: $(date)\n\n\n\n\n\nWhere \nRESERVATION\n is replaced with \nAROBINSON_TRAINING1002\n and \n\nPARTITION\n is replaced with \nmain\n\n\n\n\nRepeatable Science\n: It's good scientific practice to include the version number of the module when loading it as this will \nensure that the same version is loaded next time you run this script which will mean you get the same results.\n\n\n\nDate your work\n: It's also good practice to include the date command in the output so you have a permanent record \nof when this job was run.  If you have one before and after your main program you will get a record of how long it ran for as well.\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink75\").click(function(e){\n            e.preventDefault();\n            $(\"#showable75\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.12) Submit the job.  What was the \nlargest\n prime number it found in 20 seconds?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe output from the program will provide the results that we are after.  For HPC jobs this will be placed in the \nSLURM output file\n; this is called\n\nslurm-JOBID.out\n where JOBID is replaced by the actual job id.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink77\").click(function(e){\n            e.preventDefault();\n            $(\"#showable77\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou should get results similar to below however the actual numbers will vary as amount of computations performed will be affected by \nthe amount of other jobs running on the HPC\n\n\n$ sbatch prime_numbers\nSubmitted batch job 9304\n$ cat slurm-9304.out \nStarting at: Fri May  8 16:11:07 AEST 2015\n\nPrimes:        710119\nLast trial:    10733927\nLargest prime: 10733873\nRuntime:       20 seconds\nFinished at: Fri May  8 16:11:27 AEST 2015\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink78\").click(function(e){\n            e.preventDefault();\n            $(\"#showable78\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.13) Modify your prime_numbers script to notify you via email when it starts and ends.  Submit it again\n\n\n\n\n\n\nDid it start immediately or have some delay?\n\n\nHow long did it actually run for?\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink79\").click(function(e){\n            e.preventDefault();\n            $(\"#showable79\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nThere are two options that you will need to set.  See sbatch manpage for details.\n\n\n\n\n\n\nMore\n\n\n\n\nBoth start with \n--mail\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink81\").click(function(e){\n            e.preventDefault();\n            $(\"#showable81\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable81\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink81\").text(\"More\");\n            } else {\n                $(\"#showablelink81\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink80\").click(function(e){\n            e.preventDefault();\n            $(\"#showable80\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n#!/bin/bash\n#SBATCH --cpus-per-task=1\n#SBATCH --mem-per-cpu=1024\n#SBATCH --partition=PARTITION\n#SBATCH --time=30:00\n#SBATCH --reservation=RESERVATION\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=name@email.address\n\nmodule load training/1.0\n\necho \nStarting at: $(date)\n\nprime 20\necho \nFinished at: $(date)\n\n\n\n\n\nWhere \nRESERVATION\n is replaced with \nAROBINSON_TRAINING1002\n, \nPARTITION\n is replaced with \nmain\n and \nname@email.address\n by your email address\n\n\n\n\nAnswers\n:\n\n\n\n\nDid it start immediately or have some delay?\n The \nQueued time\n value in the subject of start email will tell you how long it waited.\n\n\nHow long did it actually run for?\n The \nRun time\n value in the subject of the end email will tell you how long it ran for which should \nbe ~20 seconds.\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink82\").click(function(e){\n            e.preventDefault();\n            $(\"#showable82\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 4: Job Monitoring\n\n\nIt is often difficult to predict how a software tool may utilise HPC System Resources (CPU/Memory) as it can vary quite widely based \non a number of factors (data set, number of CPU's, processing step etc.).\n\n\nIn this topic we will cover some of the tools that are available that enable you to \nwatch\n what is happening so we can make better predictions\nin the future.\n\n\nExercises\n\n\n\n\n\n\n4.1) What does the \ntop\n command show?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWhen all else fails, try \nman\n; specifically, the description section\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink84\").click(function(e){\n            e.preventDefault();\n            $(\"#showable84\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ man top\n...\nDESCRIPTION\n       The top program provides a dynamic real-time view of a running system.\n...\n\n\n\n\nAnswer\n: in lay-person terms \n\"Continually updating CPU and Memory usage\"\n \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink85\").click(function(e){\n            e.preventDefault();\n            $(\"#showable85\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nRun the \ntop\n command.  Above the black line it shows some \nsystem-wide statistics\n and below are statistics specific to a single \nprocess (a.k.a, tasks OR software applications).\n\n\n\n\n\n\n4.2) How much total memory does this HPC (head-node) have?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThis would be a system-wide statistic.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink87\").click(function(e){\n            e.preventDefault();\n            $(\"#showable87\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: If you look at the first value on the \nMem\n line (line 4) it will tell you the total memory on this computer (node).\n\n\n\n\nBARCOO\n: 65942760k or ~64 GigaBytes\n\n\nSNOWY\n: 132035040k or ~128 GigaBytes\n\n\nLIMS-HPC\n: 132085396k or ~128 GigaBytes\n\n\n\n\nTo transfer from kB to MB you divide by 1024 and MB to GB by 1024 again.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink88\").click(function(e){\n            e.preventDefault();\n            $(\"#showable88\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.3) What is the current total CPU usage?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThis might be easier to work out what is not used and subtract it from 100%\n\n\n\n\n\n\nMore\n\n\n\n\nIdle\n is another term for not used (or \nid\n for short)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink91\").click(function(e){\n            e.preventDefault();\n            $(\"#showable91\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable91\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink91\").text(\"More\");\n            } else {\n                $(\"#showablelink91\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink90\").click(function(e){\n            e.preventDefault();\n            $(\"#showable90\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: If you subtract the \n%id\n value (4th value on Cpu(s) line) from 100% you will get the total CPU Usage\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink92\").click(function(e){\n            e.preventDefault();\n            $(\"#showable92\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.4) What column does it appear to be sorting the processes by? Is this \nlow-to-high\n OR \nhigh-to-low\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIt's not PID but from time to time it might be ordered sequentially.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink94\").click(function(e){\n            e.preventDefault();\n            $(\"#showable94\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: \n%CPU\n which gives you an indication of how much CPU time each process uses and sorted high-to-low.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink95\").click(function(e){\n            e.preventDefault();\n            $(\"#showable95\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nAdd up the top few CPU usages of processes and compare this to the system-wide CPU usage at that time.  NOTE: you may need to quit \n\ntop\n (by pressing q) so you can compare before it updates.\n\n\n\n\n\n\n4.5) Why might the numbers disagree?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIt might have something to do with the total number of CPU Cores on the system.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink97\").click(function(e){\n            e.preventDefault();\n            $(\"#showable97\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: \n%CPU\n column gives you an indication of how much this process uses of 1 CPU Core, where as the system-wide values at the top \nare exactly that, how much the entire system is utilised.  i.e. if you could see all processes in \ntop\n (excluding round errors) \nthey would add up 100% x the number of cpu cores available; on LIMS-HPC this would be 0-1600% in the individual processes and 0-100% \non the system-wide section.  BARCOO it is 0-2400% and SNOWY it is 0-3200% for individual processes.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink98\").click(function(e){\n            e.preventDefault();\n            $(\"#showable98\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.6) What command-line flag instructs \ntop\n to sort results by \n%MEM\n?\n\n\n\n\nCan you think of a reason that this might be useful?\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink99\").click(function(e){\n            e.preventDefault();\n            $(\"#showable99\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nUse the \ntop\n manpage.\n\n\n\n\n\n\nMore\n\n\n\n\nThis one isn't obvious but it is sorting by \"allocated memory\", \"\na\n is for allocated\"\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink101\").click(function(e){\n            e.preventDefault();\n            $(\"#showable101\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable101\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink101\").text(\"More\");\n            } else {\n                $(\"#showablelink101\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink100\").click(function(e){\n            e.preventDefault();\n            $(\"#showable100\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: \ntop -a\n will cause \ntop\n to sort the processes by memory usage.\n\n\nCan you think of a reason that this might be useful?\n\n\nYour program might be using a lot of memory and you want to know how much; by sorting by memory will cause your program to stay at the top.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink102\").click(function(e){\n            e.preventDefault();\n            $(\"#showable102\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.7) Run \n\"top -c\"\n.  What does it do?  How might this be helpful?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the \ntop\n manpage.\n\n\n\n\n\n\nMore\n\n\n\n\n\"c is for complete!\"\n\n\n\"c is also for command!\"\n which is another name for program\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink105\").click(function(e){\n            e.preventDefault();\n            $(\"#showable105\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable105\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink105\").text(\"More\");\n            } else {\n                $(\"#showablelink105\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink104\").click(function(e){\n            e.preventDefault();\n            $(\"#showable104\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nWhat does it do?\n\nIt changes the COMMAND column (right most) to show the complete command (or as much that fits) including the flags and options.\n\n\nHow might this be helpful?\n\nSometimes you might be running a lot of commands with the same name that only differ by the command-line options.  In this case it is hard \nto tell which ones are still running unless you use the \n-c\n flag to show the complete command.\n\n\nNOTE\n:\n\nIf \ntop\n is running you can press the \nc\n key to toggle show/hide complete command\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink106\").click(function(e){\n            e.preventDefault();\n            $(\"#showable106\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.8) How can you get \ntop\n to only show your processes?  Why might this be useful?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the \ntop\n manpage.\n\n\n\n\n\n\nMore\n\n\n\n\n\"u is for user[name]!\"\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink109\").click(function(e){\n            e.preventDefault();\n            $(\"#showable109\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable109\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink109\").text(\"More\");\n            } else {\n                $(\"#showablelink109\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink108\").click(function(e){\n            e.preventDefault();\n            $(\"#showable108\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nHow can you get \ntop\n to only show your processes?\n\n\nAnswer 1\n: \ntop -u YOURUSERNAME\n\n\nAnswer 2\n: while running \ntop\n press the \nu\n key, type YOURUSERNAME and press \n key \n\n\nWhy might this be useful?\n\nWhen you are looking to see how much CPU or Memory you are using on a node that has other user jobs running it can be hard\nto quickly identify yours.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink110\").click(function(e){\n            e.preventDefault();\n            $(\"#showable110\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 5: All Together\n\n\nThis topic will allow you to put all the skills that you learnt in this workshop to the test.  You might need to refer back to\nthe earlier topics if you have forgotten how to do these tasks.\n\n\nOverview\n:\n\n\n\n\nWrite jobscript\n\n\nLoad/use software module\n\n\nSubmit job\n\n\nMonitor job\n\n\n\n\nTask 1: Write a job script\n\n\nWrite a job script that requests the following resources:\n\n\n\n\nFilename\n: monINITIALS.slurm\n\n\nwhere INITIALS is replaced with your initials.  e.g. for me it would be monAR.slurm\n\n\n\n\n\n\nTasks\n: 1 \n\n\nCPUs\n: 1\n\n\nPartition\n: \nmain\n \n\n\nTime\n: 6 mins (note: if it runs 1 second over SLURM will terminate it)\n\n\nMemory\n: 1 GB (remember to specify it in MB)\n\n\nReservation\n: \nAROBINSON_TRAINING1002\n\n\n\n\n\n\nTask 2: Load/use software module\n\n\nEdit your job script so that it: \n\n\n\n\nLoads the \ntraining-gcc/1.0\n module\n\n\nRuns the \nfakejob\n command with your name as the first parameter.  \n\n\nFYI: \nfakejob\n is a command that was made to demonstrate what real commands\n  might do in terms of CPU and Memory usage.  It does not perform any useful task; if you must know, it just calculates prime numbers for 5 minutes \n  and consumes some memory which you will watch in task 4\n\n\n\n\n\n\n\n\n\n\nNOTE\n: remember good practice here and add the date commands to print the date/time in your output.  You can copy them from the *task01* script.\n\n\n\n\nTask 3: Submit job\n\n\n\n\nNOTE\n: Task 4 is time dependent on task 3; you need to do it within 2 or 3 minutes of running step 3.1 so it might be a good idea to\nread ahead before hand.  Don't stress if you don't complete it in time, you can simply run 3.1 again.\n\n\n\n\n\n\nUse \nsbatch\n to submit the job to the HPC.\n\n\nNote down the job id it was given (for later).\n\n\nUse squeue (or qs) to check that is started ok.\n\n\nWhen it starts check which compute node it is running on (for the next task).\n\n\n\n\nTask 4: Monitor the job\n\n\nUse the \ntop\n command to check how much CPU and Memory the job is using.  Given that SLURM is running the job on your behalf on one of the compute \nnodes, \ntop\n won't be able to see the job.  To be able to use top, you will first need to login to the compute node that is running your job.\n\n\nTo login:\n\n\n\n\n$ ssh barcooXXX\n\n\n\n\nWhere XXX is the actual node number you were allocated (See task 3.4).\n\n\nYou are now connected from your computer to barcoo which is connected to barcooXXX.\n\n\n+---------------+            +------------+            +------------+\n| YOUR COMPUTER | -- SSH --\n |  BARCOO    | -- SSH --\n | BARCOOXXX  |\n+---------------+            +------------+            +------------+\n\n\n\n\nYou can tell which node you are on by the text in the prompt\n\n\n[USERNAME@barcoo USERNAME]$\n\nChanges to:\n\n[USERNAME@barcooXXX USERNAME]$\n\n\n\n\n\n\nOnce logged in to the relevent compute node you can run \ntop\n to view your job.  Remember the \nu\n and \nc\n options we learnt earlier; they will be helpful \nhere when everyone is running the same jobs.\n\n\n\n\n\n\n\n\nHow does the CPU and Memory usage change over time?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIt should vary (within the limits you set in the job script)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink112\").click(function(e){\n            e.preventDefault();\n            $(\"#showable112\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \nfakejob\n program should vary its CPU usage between 50 and 100% CPU and 500 and 1000MB of memory.  The percentage that it shows is based on the total \nmemory of the node that runs your job; check Topic 4, Question 4.2 to remember how to find the total memory.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink113\").click(function(e){\n            e.preventDefault();\n            $(\"#showable113\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nFinished\n\n\nWell done, you learnt a lot over the last 5 topics and you should be proud of your achievement; it \nwas a lot to take in.\n\n\nFrom here you should be comfortable to begin submitting real jobs to the HPC (in your real account, \nnot the training one).\n\n\nYou will no-doubt forget a lot of what you learnt here so I encourage you to save a link to this \nworkshop for later reference.\n\n\nThank you for your attendance, please don't forget to complete the training survey and give it\nback to the workshop facilitators.", 
            "title": "Introduction to HPC"
        }, 
        {
            "location": "/tutorials/hpc/#high-performance-computing", 
            "text": "A hands-on-workshop covering High-Performance Computing (HPC).  This workshop assumes you have a basic understanding of the Unix Operating System.  If not, then you should take\na look at the  Hands-on Unix Workshop", 
            "title": "High-Performance Computing"
        }, 
        {
            "location": "/tutorials/hpc/#introduction", 
            "text": "Before we commence the hands-on part of this workshop we will first give a short 30 minute talk to introduce the High Performance Computing concepts. \nThe  slides  are available if you would like.  Additionally the following reference material is available for later\nuse.    Reference Material", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/hpc/#what-is-an-hpc", 
            "text": "An HPC is simply a large collection of server-grade computers working together to solve large problems.   Big : HPCs typically have lots of CPUs and Memory and consequently large jobs.  Shared : There are usually lots of users making use of it at one time  Coordinated : There is a coordinator program to ensure fair-use between its users  Compute Collection : HPCs use a number of computers at once to solve lots of large jobs    Figure : The user (face at top) interacts with their local PC/Laptop through the keyboard and screen.  The PC/Laptop will \nconnect to the Head/Login node of the HPC interactively.  The Head/Login node will send the jobs off to the Compute Nodes when\none is available.", 
            "title": "What is an HPC?"
        }, 
        {
            "location": "/tutorials/hpc/#why-use-hpcs", 
            "text": "The main reason we use HPCs is because they are quite big.  Given their size, they are usually very expensive, however through \nsharing the resources the per user/job cost can be kept low.   Many CPUs : HPCs typically have 100's to 10000's of CPUs.  Compare this with the 4 or 8 that your PC/Laptop might have.  Large Memory : 100's of GBs to multiple TBs of RAM are typical for each node.  Efficient use : through sharing the resources each user can have access to a very large computer for a period and hand \nit back for others to use later.", 
            "title": "Why use HPCs?"
        }, 
        {
            "location": "/tutorials/hpc/#software-modules", 
            "text": "There are typically 100's to 1000's of software packages installed on an HPC.  Given that each can have its own special \nrequirements and multiple versions will be made, Software on the HPC will most commonly be packaged and only made available \nto you when you request it.   Packaged : to avoid conflicts between software, each is packaged up into a module and only used on demand.  Loadable : before using a software module you need to load it.  Versions : given not all users want to use the same version of software (and to compare new results with old you might \n   need the same version)    each version is made into its own software module so you have ultimate control.", 
            "title": "Software Modules"
        }, 
        {
            "location": "/tutorials/hpc/#job-submission", 
            "text": "Job Submission is the process of instructing the HPC to perform a task for you.  Depending on the HPC software installed on \nyour HPC, the process of doing so might be different.   SLURM : this workshop uses an HPC that uses the SLURM HPC software.  Some common alternatives (not covered) are PBS or \n   SGE/OGE  Queues (Partition) : when a job is submitted it is added to a work queue; in SLURM this is called a Partition.  Batch : HPC jobs are not 'interactive'.  By this we mean, you can't type input into your job's programs and you won't \n   immediately see the output that your program prints on the screen.", 
            "title": "Job Submission"
        }, 
        {
            "location": "/tutorials/hpc/#resources", 
            "text": "So that SLURM knows how to schedule and fit jobs around each other, you need to specify what resources your job will use.\nThat is, you need to tell it how many CPUs, RAM, Nodes (servers), and Time you need.   CPUs : most software is limited using 1 CPU by default but many can use more than one (or you can run multiple copies at once).\n   The number of CPUs you specify needs to match how many things your software can do at once.  Memory : you need to estimate (or guess) how much memory (RAM) your program needs.  Nodes : most software will only use one of the HPC's Nodes (i.e. One server) however some software can make use of more than\n   one to solve the problem sooner.  Time : like when you are scheduling meetings, SLURM needs to know how long each job will take (maximum) so it can organise\n   other jobs afterwards.", 
            "title": "Resources"
        }, 
        {
            "location": "/tutorials/hpc/#job-types", 
            "text": "There are two types of jobs that you can submit:   Shared : a shared job (as the name suggests) is one that shares a node with other jobs.  This is the default and preferred method.  Exclusive : an exclusive job gets a single (or multiple) nodes to itself.  Given this exclusivity, this type of job must know how \n   to use multiple CPUs as most HPCs will have at least 16 CPUs per node.      (function(w,d,u){if(!w.$){w._delayed=true;console.info(\"Delaying JQuery calls\");w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}}})(window,document)  \n    $(document).ready(function(){\n        $(\"#showablelink0\").click(function(e){\n            e.preventDefault();\n            $(\"#showable0\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Job Types"
        }, 
        {
            "location": "/tutorials/hpc/#connecting-to-hpc", 
            "text": "To begin this workshop you will need to connect to an HPC.  Today we will use the  BARCOO .  The computer called  barcoo.vlsci.unimelb.edu.au   is the \none that coordinates all the HPCs tasks.  Server details :   host :  barcoo.vlsci.unimelb.edu.au  port :  22    username :  trainXX  password :  (provided at workshop)   Connection instructions :    Mac OS X / Linux   Both Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into  BARCOO , for example, type this command at \nthe prompt and press return (where the word username is replaced with your  BARCOO  username):  $ ssh   trainXX @ barcoo.vlsci.unimelb.edu.au  The same procedure works for any other machine where you have an account except that if your Unix computer uses a port other than 22 you will\nneed to specify the port by adding the option  -p PORT  with PORT substituted with the port number.  You may be presented with a message along the lines of:  The authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?  Although you should never ignore a warning, this particular one is nothing to be concerned about; type  yes  and then  press enter . \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.     \n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Windows   On Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:  http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html  Documentation for using PuTTY is here:  http://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html  When you start PuTTY you should see a window which looks something like this:   To connect to  BARCOO  you should enter  barcoo.vlsci.unimelb.edu.au  into the box entitled \"Host Name (or IP address)\" \nand  22  in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).  In some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof  \"The server's host key is not cached in the registry\" . This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.  If all goes well, a terminal window will open, showing a prompt with the text  \"login as:\" . An example terminal window is shown \nbelow. You should type your  BARCOO  username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.      \n    $(document).ready(function(){\n        $(\"#showablelink2\").click(function(e){\n            e.preventDefault();\n            $(\"#showable2\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Connecting to HPC"
        }, 
        {
            "location": "/tutorials/hpc/#topic-1-exploring-an-hpc", 
            "text": "An HPC (short for 'High Performance Computer') is simply a collection of Server Grade computers that work together to solve large problems.   Figure : Overview of the computers involved when using an HPC.  Computer systems are shown in rectangles and arrows represent interactions.", 
            "title": "Topic 1: Exploring an HPC"
        }, 
        {
            "location": "/tutorials/hpc/#exercises", 
            "text": "1.1) What is the contact email for your HPC's System Administrator?      Hint   When you login, you will be presented with a message; this is called the  Message Of The Day  and usually includes lots of useful \ninformation.  On  BARCOO  this includes a list of useful commands, the last login details for your account and \nthe contact email of the system administrator     \n    $(document).ready(function(){\n        $(\"#showablelink4\").click(function(e){\n            e.preventDefault();\n            $(\"#showable4\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Depending on which computer you are working:   SNOWY   BARCOO: help@vlsci.unimelb.edu.au  LIMS-HPC: genomics@latrobe.edu.au      \n    $(document).ready(function(){\n        $(\"#showablelink5\").click(function(e){\n            e.preventDefault();\n            $(\"#showable5\").toggleClass(\"showable-hidden\");\n        });\n    });\n         1.2) Run the  sinfo  command.  How many nodes are there in this hpc?      Hint   The  barcoo [2-4]  is shorthand for  barcoo 2  barcoo 3 and  barcoo 4  and  barcoo [1,5]  is shorthand for barcoo 1  and  barcoo 5    more   Have a look at the NODELIST column.  Only count each node once.  $ sinfo\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ncompute*     up 200-00:00:      3    mix lims-hpc-[2-4]\ncompute*     up 200-00:00:      2   idle lims-hpc-[1,5]\nbigmem       up 200-00:00:      1   idle lims-hpc-1\n8hour        up   08:00:00      3    mix lims-hpc-[2-4]\n8hour        up   08:00:00      3   idle lims-hpc-[1,5],lims-hpc-m  NOTE: the above list will vary depending on the HPC setup.     \n    $(document).ready(function(){\n        $(\"#showablelink8\").click(function(e){\n            e.preventDefault();\n            $(\"#showable8\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable8\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink8\").text(\"more\");\n            } else {\n                $(\"#showablelink8\").text(\"less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink7\").click(function(e){\n            e.preventDefault();\n            $(\"#showable7\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  sinfo  command lists all available partitions and the status of each node within them.  If you count up the names of nodes \n(uniquely) you will get the total nodes in this cluster.     BARCOO:  70  ( barcoo001  through  barcoo070 )  SNOWY:  43  ( snowy001  through  snowy043 )  LIMS-HPC:  6  ( lims-hpc-m  and  lims-hpc-1  through  lims-hpc-5 )      \n    $(document).ready(function(){\n        $(\"#showablelink9\").click(function(e){\n            e.preventDefault();\n            $(\"#showable9\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Alternate Method   An automatic (though more complex) way would have been running the following command:  $ scontrol show node | grep NodeName | wc -l  Where:   scontrol show node : lists details of all nodes (over multiple lines)  grep NodeName : only shows the NodeName line  wc -l : counts the number of lines      \n    $(document).ready(function(){\n        $(\"#showablelink10\").click(function(e){\n            e.preventDefault();\n            $(\"#showable10\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Exercises"
        }, 
        {
            "location": "/tutorials/hpc/#topic-2-software-modules", 
            "text": "Up to this point we have been using only standard Unix software packages which are included with Linux/Unix computers.\nLarge computing systems such as HPCs often use a system of modules to load specific software packages (and versions)\nwhen needed for the user.  In this topic we will discover what science software modules (tools) are available and load them ready for analysis.  This topic uses the  man  and  module  commands heavily", 
            "title": "Topic 2: Software Modules"
        }, 
        {
            "location": "/tutorials/hpc/#exercises_1", 
            "text": "2.1) What happens if you run the  module  command without any options / arguments?      Hint   Literally type  module  and press  ENTER  key.     \n    $(document).ready(function(){\n        $(\"#showablelink12\").click(function(e){\n            e.preventDefault();\n            $(\"#showable12\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer : It prints an error followed by a list of available options / flags  $ module\ncmdModule.c(166):ERROR:11: Usage is 'module command  [arguments ...] '\n\n  Modules Release 3.2.10 2012-12-21 (Copyright GNU GPL v2 1991):\n\n  Usage: module [ switches ] [ subcommand ] [subcommand-args ]\n\nSwitches:\n    -H|--help       this usage info\n    -V|--version        modules version   configuration options\n    -f|--force      force active dependency resolution\n    -t|--terse      terse    format avail and list format\n    -l|--long       long     format avail and list format\n    -h|--human      readable format avail and list format\n    -v|--verbose        enable  verbose messages\n    -s|--silent     disable verbose messages\n    -c|--create     create caches for avail and apropos\n    -i|--icase      case insensitive\n    -u|--userlvl  lvl   set user level to (nov[ice],exp[ert],adv[anced])\n  Available SubCommands and Args:\n    + add|load      modulefile [modulefile ...]\n    + rm|unload     modulefile [modulefile ...]\n    + switch|swap       [modulefile1] modulefile2\n    + display|show      modulefile [modulefile ...]\n    + avail         [modulefile [modulefile ...]]\n    + use [-a|--append] dir [dir ...]\n    + unuse         dir [dir ...]\n    + update\n    + refresh\n    + purge\n    + list\n    + clear\n    + help          [modulefile [modulefile ...]]\n    + whatis        [modulefile [modulefile ...]]\n    + apropos|keyword   string\n    + initadd       modulefile [modulefile ...]\n    + initprepend       modulefile [modulefile ...]\n    + initrm        modulefile [modulefile ...]\n    + initswitch        modulefile1 modulefile2\n    + initlist\n    + initclear     \n    $(document).ready(function(){\n        $(\"#showablelink13\").click(function(e){\n            e.preventDefault();\n            $(\"#showable13\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.2) How do you find a list of  available  software?      Hint   Try the  module  command.  Don't forget the  man  command to get help for a command    More   Run the command  man module  Use a search to find out about the  avail  subcommand (e.g. /avail enter )     \n    $(document).ready(function(){\n        $(\"#showablelink16\").click(function(e){\n            e.preventDefault();\n            $(\"#showable16\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable16\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink16\").text(\"More\");\n            } else {\n                $(\"#showablelink16\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink15\").click(function(e){\n            e.preventDefault();\n            $(\"#showable15\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The module command is used to show details of software modules (tools).  Answer :  $ module avail\n\n------------------- /usr/share/Modules/modulefiles --------------------\ndot         module-git  module-info modules     null        use.own\n\n------------------- /usr/local/Modules/modulefiles --------------------\nacana/1.60                         mafft-gcc/7.215\naftrrad/4.1.20150201               malt/0.1.0\narlequin/3.5.1.3                   matplotlib-gcc/1.3.1\n...  The modules list has been shortened because it is very long.  The modules after the  /usr/local/Modules/modulefiles  line\nare the science software; before this are a few built-in ones that you can ignore.     \n    $(document).ready(function(){\n        $(\"#showablelink17\").click(function(e){\n            e.preventDefault();\n            $(\"#showable17\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.3) How many modules are there starting with ' f '?      Hint   Run the command  man module  Use a search to find out about the  avail  subcommand (e.g. /avail enter ).  You may have to press 'n' a few times\nto reach the section where the it describes the  avail  subcommand.    More    If an argument is given, then each directory in the MODULEPATH is searched for modulefiles\nwhose pathname match the argument   This is a quote from the manual page for the module command explaining the avail subcommand.  It uses rather technical \nlanguage but basically it's saying you can put search terms after the avail subcommand when entering the command.     \n    $(document).ready(function(){\n        $(\"#showablelink20\").click(function(e){\n            e.preventDefault();\n            $(\"#showable20\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable20\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink20\").text(\"More\");\n            } else {\n                $(\"#showablelink20\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink19\").click(function(e){\n            e.preventDefault();\n            $(\"#showable19\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The man page told us that we could put a search term after  module avail .  $ module avail f\n------------------- /usr/local/Modules/modulefiles -------------------\nfasta-gcc/35.4.12            flex-gcc/2.5.39\nfastqc/0.10.1                fontconfig-gcc/2.11.93\nfastStructure-gcc/2013.11.07 freebayes-gcc/20140603\nfastStructure-gcc/20150320   freetype-gcc/2.5.3\nfastx_toolkit-gcc/0.0.14   Answer : 26 modules   NOTE: this was correct at time of writing this workshop and might increase over time so don't be alarmed if you got more     \n    $(document).ready(function(){\n        $(\"#showablelink21\").click(function(e){\n            e.preventDefault();\n            $(\"#showable21\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Alternate Method   To get a fully automated solution your could do the following command:  $ module -l avail 2 1 | grep  ^f  | wc -l  Where:   module -l avail : lists all modules (in long format, i.e. one per line)  2 1 : merges output from  standard error  to the  standard output  so it can be feed into grep.  For some reason the\ndevelopers of the  module  command thought it was a good idea to output the module names on the  error  stream rather than\nthe logical  output  stream.  grep \"^f\" : only shows lines beginning with  f  wc -l : counts the number of lines      \n    $(document).ready(function(){\n        $(\"#showablelink22\").click(function(e){\n            e.preventDefault();\n            $(\"#showable22\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.4) Run the  pear  command (without loading it), does it work?      Hint   This question is very literal     \n    $(document).ready(function(){\n        $(\"#showablelink24\").click(function(e){\n            e.preventDefault();\n            $(\"#showable24\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ pear\n-bash: pear: command not found  The error you see is from BASH, it is complaining that it doesn't know anything about a command called 'pear'  Answer : No, command not found     \n    $(document).ready(function(){\n        $(\"#showablelink25\").click(function(e){\n            e.preventDefault();\n            $(\"#showable25\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.5) How would we  load  the  pear  module?      Hint   Check the man page for  module  again and look for a subcommand that might load modules; it is quite literal as well.    More   Run the command  man module  Use a search to find out about the  load  subcommand (e.g. /load enter )     \n    $(document).ready(function(){\n        $(\"#showablelink28\").click(function(e){\n            e.preventDefault();\n            $(\"#showable28\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable28\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink28\").text(\"More\");\n            } else {\n                $(\"#showablelink28\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink27\").click(function(e){\n            e.preventDefault();\n            $(\"#showable27\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ module load pear-gcc/0.9.4  -gcc | -intel : Lots of modules will have either  -gcc  or  -intel  after the software name.  This refers to the compiler that\nwas used to make the software.  If you have a choice then usually the  -intel  one will be faster.  VERSIONS :  module load pear-gcc  would have been sufficient to load the module however it is best-practice (in science) to specify the \nversion number so that the answer you get today will be the answer you get in 1 year time.  Some software will produce different results with different versions\nof the software.     \n    $(document).ready(function(){\n        $(\"#showablelink29\").click(function(e){\n            e.preventDefault();\n            $(\"#showable29\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.6) Now it's  load ed, run pear again, what does it do?      Hint   The paper citation gives a clue.     \n    $(document).ready(function(){\n        $(\"#showablelink31\").click(function(e){\n            e.preventDefault();\n            $(\"#showable31\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ module load pear-gcc/0.9.4\n$ pear\n ____  _____    _    ____ \n|  _ \\| ____|  / \\  |  _ \\\n| |_) |  _|   / _ \\ | |_) |\n|  __/| |___ / ___ \\|  _  \n|_|   |_____/_/   \\_\\_| \\_\\\nPEAR v0.9.4 [August 8, 2014]  - [+bzlib]\n\nCitation - PEAR: a fast and accurate Illumina Paired-End reAd mergeR\nZhang et al (2014) Bioinformatics 30(5): 614-620 | doi:10.1093/bioinformatics/btt593\n\n... REST REMOVED ...  Answer : \"PEAR: a fast and accurate Illumina Paired-End reAd mergeR\" (i.e. merges paired dna reads into a single read when they overlap)     \n    $(document).ready(function(){\n        $(\"#showablelink32\").click(function(e){\n            e.preventDefault();\n            $(\"#showable32\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.7)  List  all the loaded modules. How many are there? Where did all the others come from?      Hint   Use man to find a subcommand that will list currently loaded modules.  We are not really expecting you to be able to answer the 2nd question however if you do get it correct then well-done, that was very tough.     \n    $(document).ready(function(){\n        $(\"#showablelink34\").click(function(e){\n            e.preventDefault();\n            $(\"#showable34\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer     List  all the loaded modules. How many are there?  $ module list\nCurrently Loaded Modulefiles:\n  1) gmp/5.1.3         3) mpc/1.0.2         5) bzip2-gcc/1.0.6\n  2) mpfr/3.1.2        4) gcc/4.8.2         6) pear-gcc/0.9.4  Answer : 6  Where did all the others come from?  You may have noticed when we loaded  pear-gcc  the module called  gcc  was also loaded; this gives a hint as to where the others come from.  Answer : They are  dependencies ; that is, they are supporting software that is used by the module we loaded.  Additionally, some HPC's \nautomatically load some modules for you when you login.     \n    $(document).ready(function(){\n        $(\"#showablelink35\").click(function(e){\n            e.preventDefault();\n            $(\"#showable35\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.8) How do you undo the loading of the  pear  module?  List the loaded modules again, did they all disappear?      Hint   Computer Scientists are not always inventive with naming commands, try something starting with  un     \n    $(document).ready(function(){\n        $(\"#showablelink37\").click(function(e){\n            e.preventDefault();\n            $(\"#showable37\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   How do you undo the loading of the  pear  module?  $ module unload pear-gcc  Answer : the  unload  sub-command removes the named module from our current SSH session.  List the loaded modules again, did they all disapear?  Answer : Unfortunately not, the module command is not smart enough to determine if any of the other modules that were loaded are still\nneeded or not so we will need to do it manually (or see next question)      \n    $(document).ready(function(){\n        $(\"#showablelink38\").click(function(e){\n            e.preventDefault();\n            $(\"#showable38\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.9) How do you clear ALL loaded modules?      Hint   It's easier than running  unload  for all modules  This one isn't that straight forward; try a  synonym  of  rid .    More   We will  purge  the list of loaded modules.     \n    $(document).ready(function(){\n        $(\"#showablelink41\").click(function(e){\n            e.preventDefault();\n            $(\"#showable41\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable41\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink41\").text(\"More\");\n            } else {\n                $(\"#showablelink41\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink40\").click(function(e){\n            e.preventDefault();\n            $(\"#showable40\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ module purge   Answer : running the  purge  sub-command will unload all modules you loaded (and all dependencies).  Alternative : if you close your SSH connection and re-open it the new session will be blank as well.     \n    $(document).ready(function(){\n        $(\"#showablelink42\").click(function(e){\n            e.preventDefault();\n            $(\"#showable42\").toggleClass(\"showable-hidden\");\n        });\n    });\n        BEFORE CONTINUING : If you are using BARCOO or SNOWY you will need to load the default commands\nagain.  Do so by running  module load vlsci", 
            "title": "Exercises"
        }, 
        {
            "location": "/tutorials/hpc/#topic-3-job-submission", 
            "text": "Up to this point in the workshop (and the previous Unix workshop) we have only used the head-node of the HPC.  While this is ok for small jobs \n it's unworkable for most jobs.  In this topic we will start to learn how to make use of the rest of the HPCs immense compute power", 
            "title": "Topic 3: Job Submission"
        }, 
        {
            "location": "/tutorials/hpc/#background", 
            "text": "On conventional Unix computers (such as the HPC headnode) we enter the commands we want to run at the terminal and see the results directly output\nin front of us.  On an HPC this type of computation will only make use of one node, namely, the  Head Node .  To make use of the remaining ( compute ) nodes\nwe need to use the SLURM software package (called an HPC Scheduler).  The purpose of SLURM is to manage all user jobs and distribute the available resources\n(i.e. time on the compute nodes) to each job in a fair manner.  You can think of the SLURM software as like an electronic  calendar  and the user jobs like  meetings .  Users  say  to SLURM \"I want XX CPUS for YY hours\" and SLURM will look at its current bookings and find the next available time it can fit the job.  Terminology :   Node : a server grade computer which is part of an HPC  Batch Job : a group of one or more related Unix commands that need to be run (executed) for a user.  e.g. run fastqc on all my samples  Partition (or Queue) : a list of jobs that need to be run.  There is often more than one partition on an HPC which usually have specific requirements \nfor the jobs that can be added to them.  e.g.  8hour  will accept jobs less than or equal to 8hours long  Runtime : the amount of time a job is expected (or actually) runs  Resources : computation resources that can be given to our jobs in order to run them.  e.g. CPU Cores, Memory, and Time.  Job Script : a special BASH script that SLURM uses to run a job on our behalf once resources become available.  Job scripts contain details of the \nresources that our commands need to run.  Output (or Results) file : When SLURM runs our batch job it will save the results that would normally be output on the terminal (screen) to a file; this file \nis called the output file.  Reservation : much like a reservation for a resturant holds a table for you, the administrator can give you an HPC reservation which holds various resources\nfor a period of time exclusively for you.", 
            "title": "Background"
        }, 
        {
            "location": "/tutorials/hpc/#exercises_2", 
            "text": "Useful Commands :  man, sinfo, cat, sbatch, squeue, cp, module, prime    3.1) Which nodes could a ' main ' job go on?      Hint   Try the  sinfo  command    more   Have a look at the PARTITION and NODELIST columns.  The  barcoo [2-4]  is shorthand for  barcoo 2  barcoo 3 \nand  barcoo 4  $ sinfo\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ncompute*     up 200-00:00:      3    mix lims-hpc-[2-4]\ncompute*     up 200-00:00:      2   idle lims-hpc-[1,5]\nbigmem       up 200-00:00:      1   idle lims-hpc-1\n8hour        up   08:00:00      3    mix lims-hpc-[2-4]\n8hour        up   08:00:00      3   idle lims-hpc-[1,5],lims-hpc-m  Note: the output to the sinfo command will look different depending on which HPC you are using and it's current usage levels     \n    $(document).ready(function(){\n        $(\"#showablelink45\").click(function(e){\n            e.preventDefault();\n            $(\"#showable45\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable45\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink45\").text(\"more\");\n            } else {\n                $(\"#showablelink45\").text(\"less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink44\").click(function(e){\n            e.preventDefault();\n            $(\"#showable44\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  sinfo  command will list the  partitions .  It summaries the nodes by their current status so there may be more \nthan one line with  main  in the partition column.  It lists the nodes in shorthand i.e.  barcoo [1,3-5] means  barcoo 1,  barcoo 3,  barcoo 4,  barcoo 5.   Answer : barcoo001, barcoo002, ..., barcoo070      \n    $(document).ready(function(){\n        $(\"#showablelink46\").click(function(e){\n            e.preventDefault();\n            $(\"#showable46\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Question 3.2 not possible on  BARCOO , skipping it today    Use the  cat  command to view the contents of  task01 ,  task02  and  task03  job script    3.3) How many  cpu cores  will each ask for?      Hint   Lookup the man page for  sbatch  command.   sbatch 's options match up with the  #SBATCH  comments at the top of each job \nscript.  Some will be affected by more than one option    More   Non-exclusive (shared) jobs :  It is  --cpus-per-task x --ntasks  but if  --ntasks  is not present it defaults to 1 so its  --cpus-per-task x 1  Exclusive jobs :  The  --nodes  options tells us how many nodes we ask for and the  --exclusive  option says give us all it has.  This\none is a bit tricky as we don't really know until it runs.     \n    $(document).ready(function(){\n        $(\"#showablelink49\").click(function(e){\n            e.preventDefault();\n            $(\"#showable49\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable49\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink49\").text(\"More\");\n            } else {\n                $(\"#showablelink49\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink48\").click(function(e){\n            e.preventDefault();\n            $(\"#showable48\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer :   task01:  1 cpu core  task02:  6 cpu cores  task03:  at least 1  as this has requested all cpu cores on the node its running on ( --exclusive ). \nHowever, since we know that all nodes on  BARCOO  have 16, we know it will get 16.      \n    $(document).ready(function(){\n        $(\"#showablelink50\").click(function(e){\n            e.preventDefault();\n            $(\"#showable50\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.4) What about total memory?      Hint   Lookup the man page for  sbatch  command.   sbatch 's options match up with the  #SBATCH  comments at the top of each job \nscript.  Some will be affected by more than one option    More   The  --mem-per-cpu  OR  --mem  options are holding the answer to total memory.  For task01 and task02 the calculation is  --mem-per-cpu x --cpus-per-task x --ntasks  For task03, like with the cpus cores question, we get all the memory available on the node we get allocated     \n    $(document).ready(function(){\n        $(\"#showablelink53\").click(function(e){\n            e.preventDefault();\n            $(\"#showable53\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable53\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink53\").text(\"More\");\n            } else {\n                $(\"#showablelink53\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink52\").click(function(e){\n            e.preventDefault();\n            $(\"#showable52\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  --mem-per-cpu  OR  --mem  options are holding the answer to total memory.  For task01 and task02 the calculation is  --mem-per-cpu x --ntasks x --cpus-per-task  For task03, like with the cpus cores question, we get all the memory available on the node we get allocated  NOTE : it might be tempting to use the  --mem  option on non-exclusive (i.e.  --share ) jobs \nhowever this will  NOT  work since the meaning of  --mem  is  \"go on a node with at least X MB of memory\" ; it does \nnot actually allocate any of it to you so your job will get terminated once it tries to use any memory.  Answer :    task01:  1024MB  (1GB) i.e. 1024 x 1 x 1  task02:  12288MB  (12GB) i.e. 2048 x 3 x 2  task03:  at least 1024MB  (1GB).  The actual amount could be a lot more as most HPCs have 100GB+ per node        \n    $(document).ready(function(){\n        $(\"#showablelink54\").click(function(e){\n            e.preventDefault();\n            $(\"#showable54\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.5) How long can each run for?      Hint   Use the  man sbatch  command to look up the time specification.  If you search for  --time  it will describe the formats it uses (i.e. type  /--time  and press enter)     \n    $(document).ready(function(){\n        $(\"#showablelink56\").click(function(e){\n            e.preventDefault();\n            $(\"#showable56\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  --time  option is what tells slurm how long your job will run for.  Answer :   task01: requests  30:00 (30mins 0secs) , uses ~30secs  task02: requests  5:00 (5mins 0secs) , uses ~5secs  task03: requests  1:00 (1min 0secs) , uses ~30secs      \n    $(document).ready(function(){\n        $(\"#showablelink57\").click(function(e){\n            e.preventDefault();\n            $(\"#showable57\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.6) Is this maximum, minimum or both runtime?      Hint   Use the  man sbatch  command to look up the time specification.  If you search for  --time  it will describe the formats it uses (i.e. type  /--time  and press enter)     \n    $(document).ready(function(){\n        $(\"#showablelink59\").click(function(e){\n            e.preventDefault();\n            $(\"#showable59\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   This is a maximum time.  Your job may finish early, at which point it hands back the resources for the next job.  However if it \ntries to run longer the HPC will terminate the job. HINT : when selecting a time for your job its best to estimate your job runtime to be close to \nwhat it actually uses as it can help the HPC scheduler 'fit' your job in between other jobs though be careful to allow enough \ntime.  If you think your job may not complete in time you can ask the system administrator of your HPC to add more time.     \n    $(document).ready(function(){\n        $(\"#showablelink60\").click(function(e){\n            e.preventDefault();\n            $(\"#showable60\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.7) Calculate the  --time  specification for the following runtimes:    1h30m: --time=  1m20s: --time=  1.5days: --time=  30m: --time=      \n    $(document).ready(function(){\n        $(\"#showablelink61\").click(function(e){\n            e.preventDefault();\n            $(\"#showable61\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Use the  man sbatch  command to look up the time specification.  If you search for  --time  it will describe the formats it uses (i.e. type  /--time  and press enter)     \n    $(document).ready(function(){\n        $(\"#showablelink62\").click(function(e){\n            e.preventDefault();\n            $(\"#showable62\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer    1h30m: --time=01:30:00 (alternatively: 0-01:30)  1m20s: --time=01:20  1.5days: --time=1-12  30m: --time=30      \n    $(document).ready(function(){\n        $(\"#showablelink63\").click(function(e){\n            e.preventDefault();\n            $(\"#showable63\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.8) What do the following --time specifications mean?    --time=12-00:20  --time=45  --time=00:30      \n    $(document).ready(function(){\n        $(\"#showablelink64\").click(function(e){\n            e.preventDefault();\n            $(\"#showable64\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Use the  man sbatch  command to look up the time specification.  If you search for  --time  it will describe the formats it uses (i.e. type  /--time  and press enter)     \n    $(document).ready(function(){\n        $(\"#showablelink65\").click(function(e){\n            e.preventDefault();\n            $(\"#showable65\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer    --time=12-00:20 12 days and 20 minutes  --time=45 45 minutes  --time=00:30 30 seconds      \n    $(document).ready(function(){\n        $(\"#showablelink66\").click(function(e){\n            e.preventDefault();\n            $(\"#showable66\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Exercises"
        }, 
        {
            "location": "/tutorials/hpc/#reservations", 
            "text": "Before we continue, a quick note on reservations.  Reservations are not normally needed however sometimes we will, particularly \nwhen the HPC is busy.  To make use of a reservation you need to know its name and provide it with the  --reservation  option   Today we use the  AROBINSON_TRAINING1002  reservation so that we have resources available to run our jobs.  Your\njobs will need to contain the line:  #SBATCH --reservation= AROBINSON_TRAINING1002     Now use sbatch to submit the  task01  job:     3.9) What job id was your job given?      Hint   Use the man page for the sbatch command.  The  Synopsis  at the top will give you an idea how to run it.     \n    $(document).ready(function(){\n        $(\"#showablelink68\").click(function(e){\n            e.preventDefault();\n            $(\"#showable68\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ sbatch task01 \nSubmitted batch job 9998  Answer : it's unique for each job; in the above example mine was  9998     \n    $(document).ready(function(){\n        $(\"#showablelink69\").click(function(e){\n            e.preventDefault();\n            $(\"#showable69\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.10) Which node did your job go on?      Hint   The  squeue  command shows you the currently running jobs.  If it's been longer than 30 seconds since you submitted it you might have to resubmit it.     \n    $(document).ready(function(){\n        $(\"#showablelink71\").click(function(e){\n            e.preventDefault();\n            $(\"#showable71\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  squeue  command to show all jobs.  Search for your  jobid  and look in the  NODELIST  column.  NOTE : if there are lots of jobs you can use  squeue -u YOUR_USERNAME  to only show your jobs, where \nYOUR_USERNAME is replaced with your actual username.  $ sbatch task01\nSubmitted batch job 9999\n$ squeue -u training01\n JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n  9999   compute   task01 training  R       0:05      1 lims-hpc-2  Answer : it's dependent on node availability at time; in the above example mine was  lims-hpc-2     \n    $(document).ready(function(){\n        $(\"#showablelink72\").click(function(e){\n            e.preventDefault();\n            $(\"#showable72\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Reservations"
        }, 
        {
            "location": "/tutorials/hpc/#advanced", 
            "text": "3.11) Make a copy of  task01  and call it  prime_numbers .  Make it load the training module and use the  prime  command to calculate prime \nnumbers for 20 seconds.      Hint   You can find the  prime  command in the  training-gcc/1.0  module     \n    $(document).ready(function(){\n        $(\"#showablelink74\").click(function(e){\n            e.preventDefault();\n            $(\"#showable74\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The key points to change in the task01 script are:   adding the  module load training-gcc/1.0  replacing the  sleep  (and  echo ) statements with a call to  prime 20 .    #!/bin/bash\n#SBATCH --cpus-per-task=1\n#SBATCH --mem-per-cpu=1024\n#SBATCH --partition=PARTITION\n#SBATCH --time=30:00\n#SBATCH --reservation=RESERVATION\n\nmodule load training-gcc/1.0\n\necho  Starting at: $(date) \nprime 20\necho  Finished at: $(date)   Where  RESERVATION  is replaced with  AROBINSON_TRAINING1002  and  PARTITION  is replaced with  main   Repeatable Science : It's good scientific practice to include the version number of the module when loading it as this will \nensure that the same version is loaded next time you run this script which will mean you get the same results.  Date your work : It's also good practice to include the date command in the output so you have a permanent record \nof when this job was run.  If you have one before and after your main program you will get a record of how long it ran for as well.     \n    $(document).ready(function(){\n        $(\"#showablelink75\").click(function(e){\n            e.preventDefault();\n            $(\"#showable75\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.12) Submit the job.  What was the  largest  prime number it found in 20 seconds?      Hint   The output from the program will provide the results that we are after.  For HPC jobs this will be placed in the  SLURM output file ; this is called slurm-JOBID.out  where JOBID is replaced by the actual job id.     \n    $(document).ready(function(){\n        $(\"#showablelink77\").click(function(e){\n            e.preventDefault();\n            $(\"#showable77\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You should get results similar to below however the actual numbers will vary as amount of computations performed will be affected by \nthe amount of other jobs running on the HPC  $ sbatch prime_numbers\nSubmitted batch job 9304\n$ cat slurm-9304.out \nStarting at: Fri May  8 16:11:07 AEST 2015\n\nPrimes:        710119\nLast trial:    10733927\nLargest prime: 10733873\nRuntime:       20 seconds\nFinished at: Fri May  8 16:11:27 AEST 2015     \n    $(document).ready(function(){\n        $(\"#showablelink78\").click(function(e){\n            e.preventDefault();\n            $(\"#showable78\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.13) Modify your prime_numbers script to notify you via email when it starts and ends.  Submit it again    Did it start immediately or have some delay?  How long did it actually run for?      \n    $(document).ready(function(){\n        $(\"#showablelink79\").click(function(e){\n            e.preventDefault();\n            $(\"#showable79\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   There are two options that you will need to set.  See sbatch manpage for details.    More   Both start with  --mail     \n    $(document).ready(function(){\n        $(\"#showablelink81\").click(function(e){\n            e.preventDefault();\n            $(\"#showable81\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable81\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink81\").text(\"More\");\n            } else {\n                $(\"#showablelink81\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink80\").click(function(e){\n            e.preventDefault();\n            $(\"#showable80\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer    #!/bin/bash\n#SBATCH --cpus-per-task=1\n#SBATCH --mem-per-cpu=1024\n#SBATCH --partition=PARTITION\n#SBATCH --time=30:00\n#SBATCH --reservation=RESERVATION\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=name@email.address\n\nmodule load training/1.0\n\necho  Starting at: $(date) \nprime 20\necho  Finished at: $(date)   Where  RESERVATION  is replaced with  AROBINSON_TRAINING1002 ,  PARTITION  is replaced with  main  and  name@email.address  by your email address   Answers :   Did it start immediately or have some delay?  The  Queued time  value in the subject of start email will tell you how long it waited.  How long did it actually run for?  The  Run time  value in the subject of the end email will tell you how long it ran for which should \nbe ~20 seconds.      \n    $(document).ready(function(){\n        $(\"#showablelink82\").click(function(e){\n            e.preventDefault();\n            $(\"#showable82\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Advanced"
        }, 
        {
            "location": "/tutorials/hpc/#topic-4-job-monitoring", 
            "text": "It is often difficult to predict how a software tool may utilise HPC System Resources (CPU/Memory) as it can vary quite widely based \non a number of factors (data set, number of CPU's, processing step etc.).  In this topic we will cover some of the tools that are available that enable you to  watch  what is happening so we can make better predictions\nin the future.", 
            "title": "Topic 4: Job Monitoring"
        }, 
        {
            "location": "/tutorials/hpc/#exercises_3", 
            "text": "4.1) What does the  top  command show?      Hint   When all else fails, try  man ; specifically, the description section     \n    $(document).ready(function(){\n        $(\"#showablelink84\").click(function(e){\n            e.preventDefault();\n            $(\"#showable84\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ man top\n...\nDESCRIPTION\n       The top program provides a dynamic real-time view of a running system.\n...  Answer : in lay-person terms  \"Continually updating CPU and Memory usage\"       \n    $(document).ready(function(){\n        $(\"#showablelink85\").click(function(e){\n            e.preventDefault();\n            $(\"#showable85\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Run the  top  command.  Above the black line it shows some  system-wide statistics  and below are statistics specific to a single \nprocess (a.k.a, tasks OR software applications).    4.2) How much total memory does this HPC (head-node) have?      Hint   This would be a system-wide statistic.     \n    $(document).ready(function(){\n        $(\"#showablelink87\").click(function(e){\n            e.preventDefault();\n            $(\"#showable87\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer : If you look at the first value on the  Mem  line (line 4) it will tell you the total memory on this computer (node).   BARCOO : 65942760k or ~64 GigaBytes  SNOWY : 132035040k or ~128 GigaBytes  LIMS-HPC : 132085396k or ~128 GigaBytes   To transfer from kB to MB you divide by 1024 and MB to GB by 1024 again.     \n    $(document).ready(function(){\n        $(\"#showablelink88\").click(function(e){\n            e.preventDefault();\n            $(\"#showable88\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.3) What is the current total CPU usage?      Hint   This might be easier to work out what is not used and subtract it from 100%    More   Idle  is another term for not used (or  id  for short)     \n    $(document).ready(function(){\n        $(\"#showablelink91\").click(function(e){\n            e.preventDefault();\n            $(\"#showable91\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable91\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink91\").text(\"More\");\n            } else {\n                $(\"#showablelink91\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink90\").click(function(e){\n            e.preventDefault();\n            $(\"#showable90\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer : If you subtract the  %id  value (4th value on Cpu(s) line) from 100% you will get the total CPU Usage     \n    $(document).ready(function(){\n        $(\"#showablelink92\").click(function(e){\n            e.preventDefault();\n            $(\"#showable92\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.4) What column does it appear to be sorting the processes by? Is this  low-to-high  OR  high-to-low ?      Hint   It's not PID but from time to time it might be ordered sequentially.     \n    $(document).ready(function(){\n        $(\"#showablelink94\").click(function(e){\n            e.preventDefault();\n            $(\"#showable94\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer :  %CPU  which gives you an indication of how much CPU time each process uses and sorted high-to-low.     \n    $(document).ready(function(){\n        $(\"#showablelink95\").click(function(e){\n            e.preventDefault();\n            $(\"#showable95\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Add up the top few CPU usages of processes and compare this to the system-wide CPU usage at that time.  NOTE: you may need to quit  top  (by pressing q) so you can compare before it updates.    4.5) Why might the numbers disagree?      Hint   It might have something to do with the total number of CPU Cores on the system.     \n    $(document).ready(function(){\n        $(\"#showablelink97\").click(function(e){\n            e.preventDefault();\n            $(\"#showable97\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer :  %CPU  column gives you an indication of how much this process uses of 1 CPU Core, where as the system-wide values at the top \nare exactly that, how much the entire system is utilised.  i.e. if you could see all processes in  top  (excluding round errors) \nthey would add up 100% x the number of cpu cores available; on LIMS-HPC this would be 0-1600% in the individual processes and 0-100% \non the system-wide section.  BARCOO it is 0-2400% and SNOWY it is 0-3200% for individual processes.     \n    $(document).ready(function(){\n        $(\"#showablelink98\").click(function(e){\n            e.preventDefault();\n            $(\"#showable98\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.6) What command-line flag instructs  top  to sort results by  %MEM ?   Can you think of a reason that this might be useful?     \n    $(document).ready(function(){\n        $(\"#showablelink99\").click(function(e){\n            e.preventDefault();\n            $(\"#showable99\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Use the  top  manpage.    More   This one isn't obvious but it is sorting by \"allocated memory\", \" a  is for allocated\"     \n    $(document).ready(function(){\n        $(\"#showablelink101\").click(function(e){\n            e.preventDefault();\n            $(\"#showable101\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable101\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink101\").text(\"More\");\n            } else {\n                $(\"#showablelink101\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink100\").click(function(e){\n            e.preventDefault();\n            $(\"#showable100\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer :  top -a  will cause  top  to sort the processes by memory usage.  Can you think of a reason that this might be useful?  Your program might be using a lot of memory and you want to know how much; by sorting by memory will cause your program to stay at the top.     \n    $(document).ready(function(){\n        $(\"#showablelink102\").click(function(e){\n            e.preventDefault();\n            $(\"#showable102\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.7) Run  \"top -c\" .  What does it do?  How might this be helpful?      Hint   Use the  top  manpage.    More   \"c is for complete!\"  \"c is also for command!\"  which is another name for program     \n    $(document).ready(function(){\n        $(\"#showablelink105\").click(function(e){\n            e.preventDefault();\n            $(\"#showable105\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable105\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink105\").text(\"More\");\n            } else {\n                $(\"#showablelink105\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink104\").click(function(e){\n            e.preventDefault();\n            $(\"#showable104\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   What does it do? \nIt changes the COMMAND column (right most) to show the complete command (or as much that fits) including the flags and options.  How might this be helpful? \nSometimes you might be running a lot of commands with the same name that only differ by the command-line options.  In this case it is hard \nto tell which ones are still running unless you use the  -c  flag to show the complete command.  NOTE : \nIf  top  is running you can press the  c  key to toggle show/hide complete command     \n    $(document).ready(function(){\n        $(\"#showablelink106\").click(function(e){\n            e.preventDefault();\n            $(\"#showable106\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.8) How can you get  top  to only show your processes?  Why might this be useful?      Hint   Use the  top  manpage.    More   \"u is for user[name]!\"     \n    $(document).ready(function(){\n        $(\"#showablelink109\").click(function(e){\n            e.preventDefault();\n            $(\"#showable109\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable109\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink109\").text(\"More\");\n            } else {\n                $(\"#showablelink109\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink108\").click(function(e){\n            e.preventDefault();\n            $(\"#showable108\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   How can you get  top  to only show your processes?  Answer 1 :  top -u YOURUSERNAME  Answer 2 : while running  top  press the  u  key, type YOURUSERNAME and press   key   Why might this be useful? \nWhen you are looking to see how much CPU or Memory you are using on a node that has other user jobs running it can be hard\nto quickly identify yours.     \n    $(document).ready(function(){\n        $(\"#showablelink110\").click(function(e){\n            e.preventDefault();\n            $(\"#showable110\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Exercises"
        }, 
        {
            "location": "/tutorials/hpc/#topic-5-all-together", 
            "text": "This topic will allow you to put all the skills that you learnt in this workshop to the test.  You might need to refer back to\nthe earlier topics if you have forgotten how to do these tasks.  Overview :   Write jobscript  Load/use software module  Submit job  Monitor job", 
            "title": "Topic 5: All Together"
        }, 
        {
            "location": "/tutorials/hpc/#task-1-write-a-job-script", 
            "text": "Write a job script that requests the following resources:   Filename : monINITIALS.slurm  where INITIALS is replaced with your initials.  e.g. for me it would be monAR.slurm    Tasks : 1   CPUs : 1  Partition :  main    Time : 6 mins (note: if it runs 1 second over SLURM will terminate it)  Memory : 1 GB (remember to specify it in MB)  Reservation :  AROBINSON_TRAINING1002", 
            "title": "Task 1: Write a job script"
        }, 
        {
            "location": "/tutorials/hpc/#task-2-loaduse-software-module", 
            "text": "Edit your job script so that it:    Loads the  training-gcc/1.0  module  Runs the  fakejob  command with your name as the first parameter.    FYI:  fakejob  is a command that was made to demonstrate what real commands\n  might do in terms of CPU and Memory usage.  It does not perform any useful task; if you must know, it just calculates prime numbers for 5 minutes \n  and consumes some memory which you will watch in task 4      NOTE : remember good practice here and add the date commands to print the date/time in your output.  You can copy them from the *task01* script.", 
            "title": "Task 2: Load/use software module"
        }, 
        {
            "location": "/tutorials/hpc/#task-3-submit-job", 
            "text": "NOTE : Task 4 is time dependent on task 3; you need to do it within 2 or 3 minutes of running step 3.1 so it might be a good idea to\nread ahead before hand.  Don't stress if you don't complete it in time, you can simply run 3.1 again.   Use  sbatch  to submit the job to the HPC.  Note down the job id it was given (for later).  Use squeue (or qs) to check that is started ok.  When it starts check which compute node it is running on (for the next task).", 
            "title": "Task 3: Submit job"
        }, 
        {
            "location": "/tutorials/hpc/#task-4-monitor-the-job", 
            "text": "Use the  top  command to check how much CPU and Memory the job is using.  Given that SLURM is running the job on your behalf on one of the compute \nnodes,  top  won't be able to see the job.  To be able to use top, you will first need to login to the compute node that is running your job.  To login:   $ ssh barcooXXX  Where XXX is the actual node number you were allocated (See task 3.4).  You are now connected from your computer to barcoo which is connected to barcooXXX.  +---------------+            +------------+            +------------+\n| YOUR COMPUTER | -- SSH --  |  BARCOO    | -- SSH --  | BARCOOXXX  |\n+---------------+            +------------+            +------------+  You can tell which node you are on by the text in the prompt  [USERNAME@barcoo USERNAME]$\n\nChanges to:\n\n[USERNAME@barcooXXX USERNAME]$   Once logged in to the relevent compute node you can run  top  to view your job.  Remember the  u  and  c  options we learnt earlier; they will be helpful \nhere when everyone is running the same jobs.     How does the CPU and Memory usage change over time?      Hint   It should vary (within the limits you set in the job script)     \n    $(document).ready(function(){\n        $(\"#showablelink112\").click(function(e){\n            e.preventDefault();\n            $(\"#showable112\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  fakejob  program should vary its CPU usage between 50 and 100% CPU and 500 and 1000MB of memory.  The percentage that it shows is based on the total \nmemory of the node that runs your job; check Topic 4, Question 4.2 to remember how to find the total memory.     \n    $(document).ready(function(){\n        $(\"#showablelink113\").click(function(e){\n            e.preventDefault();\n            $(\"#showable113\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Task 4: Monitor the job"
        }, 
        {
            "location": "/tutorials/hpc/#finished", 
            "text": "Well done, you learnt a lot over the last 5 topics and you should be proud of your achievement; it \nwas a lot to take in.  From here you should be comfortable to begin submitting real jobs to the HPC (in your real account, \nnot the training one).  You will no-doubt forget a lot of what you learnt here so I encourage you to save a link to this \nworkshop for later reference.  Thank you for your attendance, please don't forget to complete the training survey and give it\nback to the workshop facilitators.", 
            "title": "Finished"
        }, 
        {
            "location": "/tutorials/unix/", 
            "text": "em {font-style: normal; font-family: courier new;}\n\n\n\nIntroduction to Unix\n\n\nA hands-on-workshop covering the basics of the Unix/Linux command line interface\n\n\n\n\nIntroduction\n\n\nBefore we commence the hands-on part of this workshop we will first give a short 30 minute talk to introduce the Unix concepts. \nThe \nsides\n are available if you would like.  Additionally the following reference material is available for later\nuse.\n\n\n\n\n\n\nReference Material\n\n\n\n\nWhy use unix\n\n\n\n\nPowerful\n: Unix computers are typically very powerful in comparision to your desktop/laptop computers.\n  Additionally they don't typically use a Graphical User Interface which can free up much resources for actual\n  computing.\n\n\nBig data\n: Unix programs are designed to handle large data sets\n\n\nFlexible\n: Small programs that can be arranged in many ways to solve your problems\n\n\nAutomation\n: Scripting allows you to do many tasks in one step and repeat steps many times\n\n\nPipelines\n: Unix programs are designed to be 'chained' together to form long multi-step pipelines\n\n\nScience Software\n: Lots of Scientific software is designed to run in a Unix environment\n\n\n\n\nUser interface\n\n\nThe Unix interface is a text-based command driven one; often known as a Command Line Interface (CLI).  This means \nthat you control it by issuing (i.e. typing) commands at the command prompt.  Consequently, the Mouse does not perform\nany function in the unix environment.\n\n\n\n\nCommand prompt\n\n\nThe command prompt is the first thing you see when you connect to a Unix Computer.  It's purpose is to receive the next\ncommand from you, the user.\n\n\n\n\nThere are several parts that make up the command prompt:\n\n\n\n\nTime\n: the time (when the last command finished)\n\n\nUsername\n: the username that you are logged in as\n\n\nHostname\n: the name of the computer that your are connected to\n\n\nCurrent working directory\n: the current position within the file system that your are working.  More to follow\n\n\nPrompt\n: this is simply a sign to the user that the computer is ready to accept the next command \n\n\n\n\nFrom this point forward in this document, the command prompt will be simply represented as a '$' rather than\nthe full command prompt as shown above.  When copying and pasting commands you should NOT copy the '$' sign.\n\n\nCommand line\n\n\nBelow is an example command with various flags and options.\n\n\n\n\nThere are a number of parts which may be included in a command; each is separated by one of more 'white-space' characters (i.e. space, tab):\n\n\n\n\nCommand\n: this is the name of the program (command) that you want to run\n\n\nFlag\n: these turn on (or off) specific features in the program.  They consist of a dash (-) followed by\n  a single character.\n\n\nLong flag\n: same as flag except they are generally two dashes (--) followed by a word (or two)\n\n\nOption\n: set the value of a configurable option.  They are a flag (or long flag) followed by a value\n\n\nAnonymous options\n: these are one or more options that are specified in the required order\n\n\nQuoted value\n: if you need to specify a space (or tab) in an option then you will need to use double (\") or \n  single (') quotes on each side of the value. \n\n\n\n\nFile system\n\n\nThe file-system of a unix computer can be thought of as an up-side-down tree.  The top most directory has a special name\ncalled 'root'; it contains all files and directories that are on the computer system.  It is represented by a single \nslash (/).  The figure below shows an example file system with directories (black outline boxes) and files (grey dashed \nboxes).\n\n\n\n\nAt the top level we have one file (settings) and one directory (home).  Inside the home directory we have two directories\n(user1 and user2) and so on.\n\n\nAbsolute file names\n\n\nAbsolute file names are a single unique name for each file and directory within the computer.  They start with the slash (/)\ncharacter and follow all the parent directories above the file/directory.\n\n\n\n\nAbsolute file name\n: \n/settings\n\n\n\n\nAbsolute file name\n: \n/home/user1/file01.txt\n\n\n\n\nAbsolute file name\n: \n/home/user2\n  \n\n\nNote\n: the final slash is not needed (but generally doesn't hurt if it is present).\n\n\nCurrent working directory\n\n\nThe \ncurrent working directory\n is the current location within the file system that you are currently using. \nWhen you first login to a unix computer it will begin with the current working directory set to your home directory, that \nis, a place that is unique to you and generally nobody else will have access to it.\n\n\n\n\nRemember from earlier that the current working directory is shown in the command prompt.\n\n\nRelative file names\n\n\nRelative file names are a short cut to writing file names that are shorter.  The difference between an absolute file\nname is that relative file names do NOT begin with a slash.\n\n\n\n\nIf your current working directory is set to \n/home\n you can leave this part from the beginning of the filename.\n\n\nRelative file name\n: \nuser1/muscle.fq\n\n\n(Note: the absence of the leading slash)\n\n\nSpecial file names\n:\n\n\nThere are a few further short cuts for typing relative file names:\n\n\n\n\n~\n (Tilde): is a short cut to your home directory\n\n\n.\n (dot): is a short cut for the current directory\n\n\n..\n (2x dot): means the parent (or one directory up) from current directory\n\n\n...\n (3x dot): does not mean anything (a got-ya for new users).  If you want 2 directories up then chain two \ndouble dot's  e.g. \n../..\n \n\n\n\n\nNote\n: the special file names above can be used within absolute and relative file name and used multiple times.\n\n\n\n\nNow, if the current working directory is changed to \n/home/user2\n the relative path to muscle.fq is different.\n\n\nRelative file name\n: \n../user1/muscle.fq\n\n\n\n\n\n\n\n\n(function(w,d,u){if(!w.$){w._delayed=true;console.info(\"Delaying JQuery calls\");w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}}})(window,document)\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink0\").click(function(e){\n            e.preventDefault();\n            $(\"#showable0\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nTopic 1: Remote log in\n\n\nIn this topic we will learn how to connect to a \nUnix\n computer via a method called \nSSH\n and run a few basic commands.\n\n\nConnecting to a Unix computer\n\n\nTo begin this workshop you will need to connect to an HPC.  Today we will use the \nBARCOO\n.  The computer called \n\nbarcoo.vlsci.unimelb.edu.au\n  is the \none that coordinates all the HPCs tasks.\n\n\nServer details\n:\n\n\n\n\nhost\n: \nbarcoo.vlsci.unimelb.edu.au\n\n\nport\n: \n22\n \n\n\nusername\n: \ntrainXX\n\n\npassword\n: \n(provided at workshop)\n\n\n\n\n\n\n\n\nMac OS X / Linux\n\n\n\n\nBoth Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into \nBARCOO\n, for example, type this command at \nthe prompt and press return (where the word username is replaced with your \nBARCOO\n username):\n\n\n$ ssh  \ntrainXX\n@\nbarcoo.vlsci.unimelb.edu.au\n\n\nThe same procedure works for any other machine where you have an account except that if your Unix computer uses a port other than 22 you will\nneed to specify the port by adding the option \n-p PORT\n with PORT substituted with the port number.\n\n\nYou may be presented with a message along the lines of:\n\n\nThe authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?\n\n\n\n\nAlthough you should never ignore a warning, this particular one is nothing to be concerned about; type \nyes\n and then \npress enter\n. \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nWindows\n\n\n\n\nOn Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\n\n\nDocumentation for using PuTTY is here:\n\n\nhttp://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html\n\n\nWhen you start PuTTY you should see a window which looks something like this:\n\n\n\n\nTo connect to \nBARCOO\n you should enter \nbarcoo.vlsci.unimelb.edu.au\n into the box entitled \"Host Name (or IP address)\" \nand \n22\n in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).\n\n\nIn some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof \n\"The server's host key is not cached in the registry\"\n. This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.\n\n\nIf all goes well, a terminal window will open, showing a prompt with the text \n\"login as:\"\n. An example terminal window is shown \nbelow. You should type your \nBARCOO\n username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink2\").click(function(e){\n            e.preventDefault();\n            $(\"#showable2\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nNote\n: for security reasons ssh will not display any characters when you enter your password. This \ncan be confusing because it appears as if your typing is not recognised by the computer. Don\u2019t be \nalarmed; type your password in and press return at the end.\n\n\nBARCOO\n is a high performance computer for \nVLSCI\n Users.  Logging in connects your local computer \n(e.g. laptop) to \nBARCOO\n, and allows you to type commands into the Unix prompt which are run on \nthe HPC, and have the results displayed on your local screen.\n\n\nYou will be allocated a training account on \nBARCOO\n for the duration of the workshop. Your \nusername and password will be supplied at the start of the workshop.\n\n\nLog out of \nBARCOO\n, and log back in again (to make sure you can repeat the process).\n\n\nAll the remaining parts assume that you are logged into \nBARCOO\n over ssh.\n\n\nExercises\n\n\n\n\n\n\n1.1) When you've logged into the Unix server, run the following commands and see what they do:\n\n\n\n\n\n\nwho\n\n\nwhoami\n\n\ndate\n\n\ncal\n\n\nhostname\n\n\n/vlsci/TRAINING/shared/Intro_to_Unix\n/hi\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink3\").click(function(e){\n            e.preventDefault();\n            $(\"#showable3\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nwho\n: displays a list of the users who are currently using this Unix computer.\n\n\nwhoami\n: displays your username (i.e. they person currently logged in).\n\n\ndate\n: displays the current date and time.\n\n\ncal\n: displays a calendar on the terminal.  It can be configured to display more than just \nthe current month.\n\n\nhostname\n: displays the name of the computer we are logged in to.\n\n\n/vlsci/TRAINING/shared/Intro_to_Unix\n/hi\n: displays the text \"Hello World\"\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink4\").click(function(e){\n            e.preventDefault();\n            $(\"#showable4\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 2: Exploring your home directory\n\n\nIn this topic we will learn how to \"look\" at the filesystem and further expand our repertoire of Unix commands. \n\n\nDuration\n: 20 minutes. \n\n\nRelevant commands\n: \nls\n, \npwd\n, \necho\n, \nman\n\n\nYour home directory contains your own private working space.  Your \ncurrent working directory\n is automatically set \nto your \nhome\n directory when you log into a Unix computer.\n\n\n\n\n\n\n2.1) Use the \nls\n command to list the files in your \nhome\n directory.  How many files are there?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nLiterally, type \nls\n and press the \nENTER\n key.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink6\").click(function(e){\n            e.preventDefault();\n            $(\"#showable6\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ ls\nexp01  file01  muscle.fq\n\n\n\n\nWhen running the \nls\n command with no options it will list files in your current working directory.  The place \nwhere you start when you first login is your \nHOME\n directory.\n\n\nAnswer\n: 3 (exp01, file01 and muscle.fq)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink7\").click(function(e){\n            e.preventDefault();\n            $(\"#showable7\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nThe above answer is not quite correct.  There are a number of \nhidden\n files in your home directory as well.\n\n\n\n\n\n\n2.2) What \nflag\n might you use to display \nall\n files with the \nls\n command?  How many files are really there?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTake the \nall\n quite literally.\n\n\n\n\n\n\nMore\n\n\n\n\nType \nls --all\n and press the \nENTER\n key.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink10\").click(function(e){\n            e.preventDefault();\n            $(\"#showable10\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable10\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink10\").text(\"More\");\n            } else {\n                $(\"#showablelink10\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink9\").click(function(e){\n            e.preventDefault();\n            $(\"#showable9\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer 1\n: \n--all\n (or \n-a\n) flag\n\n\nNow you should see several files in your home directory whose names all begin with a dot. All these files are \ncreated automatically for your user account. They are mostly configuration options for various programs including \nthe shell. It is safe to ignore them for the moment.\n\n\n$ ls --all\n.              .bash_logout    exp01    .lesshst\n..             .bash_profile   file01   muscle.fq\n.bash_history  .bashrc         .kshrc   .viminfo\n\n\n\n\nThere are two trick files here; namely \n.\n and \n..\n which are not real files but instead, shortcuts.  \n.\n is a shortcut\nfor the current directory and \n..\n a shortcut for the directory above the current one.\n\n\nAnswer 2\n: 10 files (don't count \n.\n and \n..\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink11\").click(function(e){\n            e.preventDefault();\n            $(\"#showable11\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.3) What is the full path name of your \nhome\n directory?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember your \nCurrent Working Directory\n start's in your \nhome\n directory.\n\n\n\n\n\n\nMore\n\n\n\n\nTry a shortened version of \nprint working directory\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink14\").click(function(e){\n            e.preventDefault();\n            $(\"#showable14\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable14\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink14\").text(\"More\");\n            } else {\n                $(\"#showablelink14\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink13\").click(function(e){\n            e.preventDefault();\n            $(\"#showable13\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou can find out the full path name of the current working directory with the \npwd\n command. Your home directory \nwill look something like this:\n\n\n$ pwd\n/home/trainingXX\n\n\n\n\nAnswer\n: \n/vlsci/TRAINING/trainXX\n\n\nwhere \nXX\n is replaced by some 2 digit sequence.\n\n\nAlternate method\n:\nYou can also find out the name of your home directory by printing the value of the \n$HOME\n shell variable:\n\n\necho $HOME\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink15\").click(function(e){\n            e.preventDefault();\n            $(\"#showable15\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.4) Run \nls\n using the long-list flag (\n-l\n), how did the output change?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRun \nls -l\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink17\").click(function(e){\n            e.preventDefault();\n            $(\"#showable17\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: it changed the output to place 1 file/directory per line.  It also added some extra information\nabout each.\n\n\n$ ls -l\ntotal 32\ndrwxr-x--- 2 training01 training 2048 Jun 14 11:28 exp01\n-rw-r----- 1 training01 training   97 Jun 14 11:28 file01\n-rw-r----- 1 training01 training 2461 Jun 14 11:28 muscle.fq\n\n\n\n\nDetails\n:\n\n\ndrwxr-x--- 2 training01 training 2048 Jun 14 11:28 exp01\n\\--------/ ^ \\--------/ \\------/ \\--/ \\----------/ \\---/\npermission |  username   group   size    date       name\n       /---^---\\\n       linkcount\n\n\n\n\nWhere:\n\n\n\n\npermissions\n: made up of 4 parts: file type, user perms, group perms and other perms\n\n\nfiletype\n: 1 character, \nd\n = directory and \n-\n regular file\n\n\nuser\n permissions: 3 characters, \nr\n = read, \nw\n = write, \nx\n = execute and \n-\n no permission\n\n\ngroup\n permissions: same as user except for users within the owner group\n\n\nother\n permissions: same as user except for users that are not in either user \nor\n \ngroup\n\n\n\n\n\n\nusername\n: the user who \nowns\n this file/directory\n\n\ngroup\n: the group name who \nowns\n this file/directory\n\n\nsize\n: the number of bytes this file/directory takes to store on disk\n\n\ndate\n: the date and time when this file/directory was \nlast edited\n\n\nname\n: name of the file\n\n\nlinkcount\n: technical detail which represents the number of links this file has in the file system (safe to ignore)\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink18\").click(function(e){\n            e.preventDefault();\n            $(\"#showable18\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.5) What type of file is \nexp01\n and \nmuscle.fq\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck the output from the \nls -l\n.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink20\").click(function(e){\n            e.preventDefault();\n            $(\"#showable20\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n:\n\n\n\n\nexp01\n: Directory (given the 'd' as the first letter of its permissions)\n\n\nmuscle.fq\n: Regular File (given the '-')\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink21\").click(function(e){\n            e.preventDefault();\n            $(\"#showable21\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.6) Who has permission to \nread\n, \nwrite\n and \nexecute\n your \nhome\n directory?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nYou can also give \nls\n a filename as the first option.\n\n\n\n\n\n\nMore\n\n\n\n\nls -l\n will show you the contents of the \nCWD\n; how might you see the contents of the \nparent\n directory? (remember\nthe slides)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink24\").click(function(e){\n            e.preventDefault();\n            $(\"#showable24\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable24\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink24\").text(\"More\");\n            } else {\n                $(\"#showablelink24\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink23\").click(function(e){\n            e.preventDefault();\n            $(\"#showable23\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nIf you pass the \n-l\n flag to ls it will display a \"long\" listing of file information including file permissions.\n\n\nThere are various ways you could find out the permissions on your home directory.\n\n\nMethod 1\n: given we know the \nCWD\n is our home directory.\n\n\n$ ls -l ..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...\n\n\n\n\nThe \n..\n refers to the parent directory.\n\n\nMethod 2\n: using $HOME.  This works no matter what our \nCWD\n is set to. \n\n\nYou could list the permissions of all files and directories in the parent directory of your home:\n\n\n$ ls -l $HOME/..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...\n\n\n\n\nIn this case we use the shell variable to refer to our home directory.\n\n\nMethod 3\n: using \n~\n (tilde) shortcut\n\n\nYou may also refer to your home directory using the \n~\n (tilde) character:\n\n\n$ ls -l ~/..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...\n\n\n\n\nAll 3 of the methods above mean the same thing.\n\n\nYou will see a list of files and directories in the parent directory of your home directory. One of them will \nbe the name of your home directory, something like \ntrainXX\n.  Where \nXX\n is replaced by a two digit string\n\n\nAltername\n: using the \n-a\n flag and looking at the \n.\n (dot) special file.\n\n\n$ ls -la\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 .\n...\n\n\n\n\nAnswer\n: \ndrwxr-x---\n\n\n\n\nYou\n: read (see filenames), write (add, delete files), execute (change your CWD to this directory).\n\n\nTraining users\n: read, execute\n\n\nEveryone else\n: No access\n\n\n\n\nDiscussion on Permissions\n:\n\n\nThe permission string is \n\"drwxr-x---\"\n. The \nd\n means it is a directory. The \nrwx\n means that the owner of the directory \n(your user account) can \nread\n, \nwrite\n and \nexecute\n the directory. Execute permissions on a directory means that you \ncan \ncd\n into the directory. The \nr-x\n means that anyone in the same user group as \ntraining\n can read or execute the \ndirectory. The \n---\n means that nobody else (other users on the system) can do anything with the directory.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink25\").click(function(e){\n            e.preventDefault();\n            $(\"#showable25\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nman\n is for manual\n: and it will be your best friend!\n\n\nManual pages include a lot of detail about a command and its available flags/options.  It should be your first (or second) \nport of call when you are trying to work out what a command or option does.\n\n\nYou can scroll \nup\n and \ndown\n in the man page using the \narrow\n keys.\n\n\nYou can search in the man page using the forward \nslash followed by the search text followed by the \nENTER\n key. e.g. \ntype \n/group\n and press \nENTER\n to search for the word \ngroup\n.  Press \nn\n key to find next \noccurrence of \ngroup\n etc.\n\n\nYou can \nquit\n the man page by pressing \nq\n.\n\n\n\n\n\n\n\n\n\n\n\n2.7) Use the \nman\n command to find out what the \n-h\n flag does for \nls\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nGive \nls\n as an option to \nman\n command.\n\n\n\n\n\n\nMore\n\n\n\n\nman ls\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink28\").click(function(e){\n            e.preventDefault();\n            $(\"#showable28\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable28\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink28\").text(\"More\");\n            } else {\n                $(\"#showablelink28\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink27\").click(function(e){\n            e.preventDefault();\n            $(\"#showable27\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the following command to view the \nman\n page for \nls\n:\n\n\n$ man ls\n\n\n\n\nAnswer\n: You should discover that the \n-h\n option prints file sizes in human readable format\n\n\n-h, --human-readable\n              with -l, print sizes in human readable format (e.g., 1K 234M 2G)\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink29\").click(function(e){\n            e.preventDefault();\n            $(\"#showable29\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n2.8) Use the \n-h\n, how did the output change of \nmuscle.fq\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nDon't forget the \n-l\n option too.\n\n\n\n\n\n\nMore\n\n\n\n\nRun \nls -lh\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink32\").click(function(e){\n            e.preventDefault();\n            $(\"#showable32\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable32\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink32\").text(\"More\");\n            } else {\n                $(\"#showablelink32\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink31\").click(function(e){\n            e.preventDefault();\n            $(\"#showable31\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ ls -lh\n...\n-rw-r----- 1 training01 training 2.5K Jun 14 11:28 muscle.fq\n\n\n\n\nAnswer\n: it changed the output so the \nfilesize\n of \nmuscle.fq\n is now \n2.5K\n instead of \n2461\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink33\").click(function(e){\n            e.preventDefault();\n            $(\"#showable33\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 3: Exploring the file system\n\n\nIn this topic we will learn how to move around the filesystem and see what is there.\n\n\nDuration\n: 30 minutes. \n\n\nRelevant commands\n: \npwd\n, \ncd\n, \nls\n, \nfile\n\n\n\n\n\n\n3.1) Print the value of your current working directory.\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \npwd\n command prints the value of your current working directory.\n\n\n$ pwd\n/home/training01\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink35\").click(function(e){\n            e.preventDefault();\n            $(\"#showable35\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.2) List the contents of the root directory, called '\n/\n' (forward \nslash).\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nls\n expects one or more anonymous options which are the files/directories to list.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink37\").click(function(e){\n            e.preventDefault();\n            $(\"#showable37\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ ls /\napplications-merged  etc         media    root     tmp\nbin                  home        mnt      sbin     usr\nboot                 lib         oldhome  selinux  var\ndata                 lib64       opt      srv\ndev                  lost+found  proc     sys\n\n\n\n\nHere we see that \nls\n can take a filepath as its argument, which allows you to list the contents of directories \nother than your current working directory.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink38\").click(function(e){\n            e.preventDefault();\n            $(\"#showable38\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.3) Use the \ncd\n command to change your working directory to the root directory.  Did your prompt \nchange?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\ncd\n expects a single option which is the directory to change to\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink40\").click(function(e){\n            e.preventDefault();\n            $(\"#showable40\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \ncd\n command changes the value of your current working directory. To change to the root directory use the \nfollowing command:\n\n\n$ cd /\n\n\n\n\nAnswer\n: Yes, it now says the CWD is \n/\n instead of \n~\n.\n\n\nSome people imagine that changing the working directory is akin to moving your focus within the file system. \nSo people often say \"move to\", \"go to\" or \"charge directory to\" when they want to change the working directory.\n\n\nThe root directory is special in Unix. It is the topmost directory in the whole file system.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink41\").click(function(e){\n            e.preventDefault();\n            $(\"#showable41\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nOutput on ERROR only\n: Many Unix commands will not produce any output if everything went well; \ncd\n is one\nsuch command.  However, it will get grumpy if something went wrong by way of an error message on-screen.\n\n\n\n\n\n\n\n\n\n\n3.4) List the contents of the CWD and verify it matches the list in 3.2\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nls\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink43\").click(function(e){\n            e.preventDefault();\n            $(\"#showable43\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAssuming you have changed to the root directory then this can be achieved with \nls\n, or \nls -a\n (for all files) or \n\nls -la\n for a long listing of all files.\n\n\nIf you are not currently in the root directory then you can list its contents by passing it as an argument to ls:\n\n\n$ ls\napplications-merged  etc         media    root     tmp\nbin                  home        mnt      sbin     usr\nboot                 lib         oldhome  selinux  var\ndata                 lib64       opt      srv\ndev                  lost+found  proc     sys\n\n\n\n\nAnswer\n: Yes, we got the same output as exercise 3.2\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink44\").click(function(e){\n            e.preventDefault();\n            $(\"#showable44\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.5) Change your current working directory back to your home directory. What is the simplest Unix command that \nwill get you back to your home directory from anywhere else in the file system?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe answer to exercise 2.6 might give some hints on how to get back to the home directory\n\n\n\n\n\n\nMore\n\n\n\n\n$HOME\n, \n~\n, \n/vlsci/TRAINING/trainXX\n are all methods to name your home directory.  Yet there is a simpler method; the answer\nis buried in \nman cd\n however \ncd\n doesn't have its own manpage so you will need to search for it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink47\").click(function(e){\n            e.preventDefault();\n            $(\"#showable47\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable47\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink47\").text(\"More\");\n            } else {\n                $(\"#showablelink47\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink46\").click(function(e){\n            e.preventDefault();\n            $(\"#showable46\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \ncd\n command to change your working directory to your home directory. There are a number of ways to refer \nto your home directory:\n\n\ncd $HOME\n\n\n\n\nis equivalent to:\n\n\ncd ~\n\n\n\n\nThe simplest way to change your current working directory to your home directory is to run the \ncd\n command with \nno arguments:\n\n\nAnswer\n: the simplest for is cd with NO options.\n\n\ncd\n\n\n\n\nThis is a special-case behaviour which is built into \ncd\n for convenience.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink48\").click(function(e){\n            e.preventDefault();\n            $(\"#showable48\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.6) Change your working directory to the following directory\n\n\n\n\n/vlsci/TRAINING/shared/Intro_to_Unix\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink49\").click(function(e){\n            e.preventDefault();\n            $(\"#showable49\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: \ncd \n/vlsci/TRAINING/shared/Intro_to_Unix\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink50\").click(function(e){\n            e.preventDefault();\n            $(\"#showable50\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.7) List the contents of that directory. How many files does it contain?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nls\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink52\").click(function(e){\n            e.preventDefault();\n            $(\"#showable52\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou can do this with \nls\n\n\n$ ls\nexpectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy\n\n\n\n\nAnswer\n: 7 files (expectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink53\").click(function(e){\n            e.preventDefault();\n            $(\"#showable53\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.8) What kind of \nfile\n is\n \n/vlsci/TRAINING/shared/Intro_to_Unix\n/sleepy\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTake the word \nfile\n quite literally.\n\n\n\n\n\n\nMore\n\n\n\n\nfile sleepy\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink56\").click(function(e){\n            e.preventDefault();\n            $(\"#showable56\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable56\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink56\").text(\"More\");\n            } else {\n                $(\"#showablelink56\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink55\").click(function(e){\n            e.preventDefault();\n            $(\"#showable55\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nfile\n command to get extra information about the contents of a file:\n\n\nAssuming your current working directory is \n/vlsci/TRAINING/shared/Intro_to_Unix\n\n\n$ file sleepy\nBourne-Again shell script text executable\n\n\n\n\nOtherwise specify the full path of sleepy:\n\n\n\n\n$ file /vlsci/TRAINING/shared/Intro_to_Unix/sleepy\nBourne-Again shell script text executable\n\n\n\n\n\n\nAnswer\n: Bourne-Again shell script text executable\n\n\nThe \"Bourne-Again shell\" is more commonly known as BASH. The \nfile\n command is telling us that sleepy \nis (probably) a shell script written in the language of BASH.\n\n\nThe file command uses various heuristics to guess the \"type\" of a file. If you want to know how it works \nthen read the Unix manual page like so:\n\n\nman file\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink57\").click(function(e){\n            e.preventDefault();\n            $(\"#showable57\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.9) What kind of \nfile\n is \n \n/vlsci/TRAINING/shared/Intro_to_Unix\n/hi\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nTake the word \nfile\n quite literally.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink59\").click(function(e){\n            e.preventDefault();\n            $(\"#showable59\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the file command again. If you are in the same directory as \nhi\n then:\n\n\n$ file hi\nELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux \n2.6.9, not stripped\n\n\n\n\nAnswer\n: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux \n\n\nThis rather complicated output is roughly saying that the file called \nhi\n contains a binary executable \nprogram (raw instructions that the computer can execute directly).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink60\").click(function(e){\n            e.preventDefault();\n            $(\"#showable60\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.10) What are the file permissions of the following file and what do they mean?\n \n/vlsci/TRAINING/shared/Intro_to_Unix\n/sleepy\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember the \nls\n command, and don't forget the \n-l\n flag\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink62\").click(function(e){\n            e.preventDefault();\n            $(\"#showable62\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou can find the permissions of \nsleepy\n using the \nls\n command with the \n-l\n flag. If you are in the same \ndirectory as \nsleepy\n then:\n\n\n$ ls -l sleepy\n-rw-r--r-- 1 arobinson common 183 Feb  9 16:36 sleepy\n\n\n\n\nAnswer\n: The Answer is dependent on the computer you are connected too however will follow something like above. \nWe can see that this particular instance of sleepy is owned by the user arobinson, and is part of the common \nuser group. It is 183 bytes in size, and was last modified on the 9th of February at 4:36pm. The file is \nreadable to everyone, and write-able only to arobinson.  The digit '1' between the file permission string and \nthe owner indicates that there is one link to the file. The Unix file system allows files to be referred to \nby multiple \"links\". When you create a file it is referred to by one link, but you may add others later. For \nfuture reference: links are created with the \nln\n command.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink63\").click(function(e){\n            e.preventDefault();\n            $(\"#showable63\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n3.11) Change your working directory back to your home directory ready for the next topic.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\ncd\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink65\").click(function(e){\n            e.preventDefault();\n            $(\"#showable65\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou should know how to do this with the cd command:\n\n\ncd\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink66\").click(function(e){\n            e.preventDefault();\n            $(\"#showable66\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 4: Working with files and directories\n\n\nIn this topic we will start to read, create, edit and delete files and directories.\n\n\nDuration\n: 50 minutes.  \n\n\nRelevant commands\n: \nmkdir\n, \ncp\n, \nls\n, \ndiff\n, \nwc\n, \nnano\n, \nmv\n, \nrm\n, \nrmdir\n, \nhead\n, \ntail\n, \ngrep\n, \ngzip\n, \ngunzip\n\n\n\n\nHint\n: Look at the commands above; you will need them roughly in order for this topic.  Use the \nman\n\ncommand find out what they do, in particular the NAME, SYNOPSIS and DESCRIPTION sections.\n\n\n\n\n\n\n\n\n\n\n4.1) In your home directory make a sub-directory called test.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nYou are trying to \nmake a directory\n, which of the above commands looks like a shortened version of this?\n\n\n\n\n\n\nMore\n\n\n\n\nmkdir\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink69\").click(function(e){\n            e.preventDefault();\n            $(\"#showable69\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable69\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink69\").text(\"More\");\n            } else {\n                $(\"#showablelink69\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink68\").click(function(e){\n            e.preventDefault();\n            $(\"#showable68\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nMake sure you are in your home directory first. If not \ncd\n to your home directory.\n\n\nUse the \nmkdir\n command to make new directories:\n\n\n$ mkdir test\n\n\n\n\nUse the \nls\n command to check that the new directory was created.\n\n\n$ ls\nexp01  file01  muscle.fq  test\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink70\").click(function(e){\n            e.preventDefault();\n            $(\"#showable70\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.2) Copy all the files from the following directory into the newly created test directory.\n \n/vlsci/TRAINING/shared/Intro_to_Unix\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nYou are trying to \ncopy\n, which of the above commands looks like a shortened version of this?\n\n\n\n\n\n\nMore\n\n\n\n\n$ man cp\n...\nSYNOPSIS\n       cp [OPTION]... [-T] SOURCE DEST\n...\nDESCRIPTION\n       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\n\n\n\n\nwhich means \ncp\n expects zero or more flags, a SOURCE file followed by a DEST file or directory \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink73\").click(function(e){\n            e.preventDefault();\n            $(\"#showable73\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable73\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink73\").text(\"More\");\n            } else {\n                $(\"#showablelink73\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink72\").click(function(e){\n            e.preventDefault();\n            $(\"#showable72\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \ncp\n command to copy files. \n\n\nWildcards\n: You could copy them one-by-one, but that would be tedious, so use \nthe \n*\n wildcard to specify that you want to copy all the files.\n\n\n\n\nThere are a number of ways you could do this depending on how you specify the source and destination \npaths to \ncp\n. You only need to perform one of these ways, but we show multiple ones for your reference.\n\n\nAnswer 1\n: From your home directory:\n\n\n\n\n$ cp /vlsci/TRAINING/shared/Intro_to_Unix/* test\n\n\n\n\n\n\nAnswer 2\n: Change to the test directory and then copy (assuming you started in your home directory):\n\n\n\n\n$ cd test\n$ cp /vlsci/TRAINING/shared/Intro_to_Unix/* .\n\n\n\n\n\n\nIn the example above the '\n.\n' (dot) character refers to the current working directory. It should be \nthe test subdirectory of your home directory.\n\n\nAnswer 3\n: Change to the \\end{UNIX_TRAINING_FILES_PATH} directory and then copy:\n\n\n\n\ncd /vlsci/TRAINING/shared/Intro_to_Unix/\ncp * ~/test\n\n\n\n\n\n\nRemember that ~ is a shortcut reference to your home directory.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink74\").click(function(e){\n            e.preventDefault();\n            $(\"#showable74\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nNote\n: This exercise assumes that the copy command from the previous exercise was successful. \n\n\n\n\n\n\n4.3) Check that the file size of \nexpectations.txt\n is the same in both the directory that you copied \nit from and the directory that you copied it to.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember \nls\n can show you the file size (with one of its flags)\n\n\n\n\n\n\nMore\n\n\n\n\nls -l\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink77\").click(function(e){\n            e.preventDefault();\n            $(\"#showable77\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable77\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink77\").text(\"More\");\n            } else {\n                $(\"#showablelink77\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink76\").click(function(e){\n            e.preventDefault();\n            $(\"#showable76\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse \nls -l\n to check the size of files.\n\n\nYou could do this in many ways depending on the value of your working directory. We just show one possible \nway for each file:\n\n\n\n\n$ ls -l /vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt\n\n$ ls -l ~/test/expectations.txt\n\n\n\n\n\n\nFrom the output of the above commands you should be able to see the size of each file and check that they \nare the same. \n\n\nAnswer\n: They should each be \n1033773\n bytes\n\n\nAlternate\n: Sometimes it is useful to get file sizes reported in more \"human friendly\" units than bytes. If this is \ntrue then try the \n-h\n option for ls:\n\n\n\n\n$ ls -lh /vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt\n-rw-r--r-- 1 arobinson common 1010K Mar 26  2012 /vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt\n\n\n\n\n\n\nIn this case the size is reported in kilobytes as \n1010K\n. Larger files are reported in megabytes, gigabytes \netcetera.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink78\").click(function(e){\n            e.preventDefault();\n            $(\"#showable78\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\nNote\n: this exercise assumes your working directory is \n~/test\n; if not run \ncd ~/test\n\n\n\n\n\n\n4.4) Check that the contents of expectations.txt are the same in both the directory that you copied \nit from and the directory that you copied it to.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWhat is the opposite of \nsame\n?\n\n\n\n\n\n\nMore\n\n\n\n\ndiff\nerence\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink81\").click(function(e){\n            e.preventDefault();\n            $(\"#showable81\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable81\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink81\").text(\"More\");\n            } else {\n                $(\"#showablelink81\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink80\").click(function(e){\n            e.preventDefault();\n            $(\"#showable80\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \ndiff\n command to compare the contents of two files.\n\n\n\n\n$ diff /vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt expectations.txt\n\n\n\n\n\n\nIf the two files are identical the \ndiff\n command will NOT produce any output)\n\n\nAnswer\n: Yes, they are the same since no output was given.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink82\").click(function(e){\n            e.preventDefault();\n            $(\"#showable82\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.5) How many lines, words and characters are in expectations.txt?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nInitialisms are key\n\n\n\n\n\n\nMore\n\n\n\n\nw\nord \nc\nount\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink85\").click(function(e){\n            e.preventDefault();\n            $(\"#showable85\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable85\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink85\").text(\"More\");\n            } else {\n                $(\"#showablelink85\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink84\").click(function(e){\n            e.preventDefault();\n            $(\"#showable84\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nwc\n (for \"word count\") to count the number of characters, lines and words in a file:\n\n\n$ wc expectations.txt\n  20415  187465 1033773 expectations.txt\n\n\n\n\nAnswer\n: There are \n20415\n lines, \n187465\n words and \n1033773\n characters in expectations.txt.\n\n\nTo get just the line, word or character count:\n\n\n$ wc -l expectations.txt\n20415 expectations.txt\n$ wc -w expectations.txt\n187465 expectations.txt\n$ wc -c expectations.txt\n1033773 expectations.txt\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink86\").click(function(e){\n            e.preventDefault();\n            $(\"#showable86\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.6) Open \n~/test/expectations.txt\n in the \nnano\n text editor, delete the first line of text, and \nsave your changes to the file. Exit \nnano\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nnano FILENAME\n\n\nOnce \nnano\n is open it displays some command hints along the bottom of the screen.\n\n\n\n\n\n\nMore\n\n\n\n\n^O\n means hold the \nControl\n (or CTRL) key while pressing the \no\n.  Dispite what it displays, you need to type \nthe lower-case letter that follows the \n^\n character.\n\n\nWriteOut is another name for Save.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink89\").click(function(e){\n            e.preventDefault();\n            $(\"#showable89\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable89\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink89\").text(\"More\");\n            } else {\n                $(\"#showablelink89\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink88\").click(function(e){\n            e.preventDefault();\n            $(\"#showable88\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nTake some time to play around with the \nnano\n text editor.\n\n\nNano\n is a very simple text editor which is easy to use but limited in features. More powerful \neditors exist such as \nvim\n and \nemacs\n, however they take a substantial amount of time to learn.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink90\").click(function(e){\n            e.preventDefault();\n            $(\"#showable90\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.7) Did the changes you made to \n~/test/expectations.txt\n have any effect on \n\n \n/vlsci/TRAINING/shared/Intro_to_Unix\n? How can you tell if two files are the \nsame or different in their contents?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember exercise 4.4\n\n\n\n\n\n\nMore\n\n\n\n\nUse \ndiff\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink93\").click(function(e){\n            e.preventDefault();\n            $(\"#showable93\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable93\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink93\").text(\"More\");\n            } else {\n                $(\"#showablelink93\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink92\").click(function(e){\n            e.preventDefault();\n            $(\"#showable92\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse \ndiff\n to check that the two files are different after you have made the change to the copy of \n\nexpectations.txt\n in your \n~/test\n directory.\n\n\n\n\ndiff ~/test/expectations.txt \\\n/vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt\n\n\n\n\n\n\nYou could also use \nls\n to check that the files have different sizes.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink94\").click(function(e){\n            e.preventDefault();\n            $(\"#showable94\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.8) In your \ntest\n subdirectory, rename \nexpectations.txt\n to \nfoo.txt\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nAnother way to think of it is \nmoving\n it from \nexpectations.txt\n to \nfoo.txt\n\n\n\n\n\n\nMore\n\n\n\n\nmv\n\n\nUse \nman mv\n if you need to work out how to use it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink97\").click(function(e){\n            e.preventDefault();\n            $(\"#showable97\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable97\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink97\").text(\"More\");\n            } else {\n                $(\"#showablelink97\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink96\").click(function(e){\n            e.preventDefault();\n            $(\"#showable96\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nmv\n command to rename the file:\n\n\n$ mv expectations.txt foo.txt\n$ ls\nfoo.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink98\").click(function(e){\n            e.preventDefault();\n            $(\"#showable98\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.9) Rename foo.txt back to expectations.txt.\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nmv\n command to rename the file:\n\n\n$ mv foo.txt expectations.txt\n$ ls\nexpectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy\n\n\n\n\nUse \nls\n to check that the file is in fact renamed.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink100\").click(function(e){\n            e.preventDefault();\n            $(\"#showable100\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.10) Remove the file \nexpectations.txt\n from your \ntest\n directory.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWe are trying to \nremove\n a file, check the commands at the top of this topic.\n\n\n\n\n\n\nMore\n\n\n\n\nrm\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink103\").click(function(e){\n            e.preventDefault();\n            $(\"#showable103\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable103\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink103\").text(\"More\");\n            } else {\n                $(\"#showablelink103\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink102\").click(function(e){\n            e.preventDefault();\n            $(\"#showable102\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \nrm\n command to remove files (carefully):\n\n\n$ rm expectations.txt\n$ ls\nhello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink104\").click(function(e){\n            e.preventDefault();\n            $(\"#showable104\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.11) Remove the entire \ntest\n directory and all the files within it.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWe are trying to \nremove a directory\n.\n\n\n\n\n\n\nMore\n\n\n\n\nYou could use \nrmdir\n but there is an easier way using just \nrm\n and a flag.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink107\").click(function(e){\n            e.preventDefault();\n            $(\"#showable107\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable107\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink107\").text(\"More\");\n            } else {\n                $(\"#showablelink107\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink106\").click(function(e){\n            e.preventDefault();\n            $(\"#showable106\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou could use the \nrm\n command to remove each file individually, and then use the \nrmdir\n command \nto remove the directory. Note that \nrmdir\n will only remove directories that are empty (i.e. do not \ncontain files or subdirectories).\n\n\nA faster way is to pass the \n-r\n (for recursive) flag to \nrm\n to remove all the files and the \ndirectory in one go:\n\n\nLogical Answer\n:\n\n\ncd ~\nrm test/*\nrmdir test\n\n\n\n\nEasier Answer\n:\n\n\ncd ~\nrm -r test\n\n\n\n\nWarning\n: Be very careful with \nrm -r\n, it will remove all files \nand all subdirectories underneath the specified directory. This could be catastrophic if you do it \nin the wrong location! Now is a good moment to pause and think about file backup strategies.\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink108\").click(function(e){\n            e.preventDefault();\n            $(\"#showable108\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.12) Recreate the test directory in your home directory and copy all the files from \n\n/vlsci/TRAINING/shared/Intro_to_Unix\n back into the test directory.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nSee exercises 4.1 and 4.2\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink110\").click(function(e){\n            e.preventDefault();\n            $(\"#showable110\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nRepeat exercises 4.1 and 4.2.\n\n\n\n\n$ cd ~\n$ mkdir test\n$ cp /vlsci/TRAINING/shared/Intro_to_Unix/* test\n\n\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink111\").click(function(e){\n            e.preventDefault();\n            $(\"#showable111\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.13) Change directories to \n~/test\n and use the \ncat\n command to display the entire contents \nof the file \nhello.c\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse \nman\n if you can't guess how it might work.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink113\").click(function(e){\n            e.preventDefault();\n            $(\"#showable113\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ cd ~/test\n$ cat hello.c\n#include \nstdio.h\n\nint main(void) {\n    printf (\nHello World\\n\n);\n    return 0;\n}\n\n\n\n\nhello.c\n contains the source code of a C program. The compiled executable version of this code \nis in the file called \nhi\n, which you can run like so:\n\n\n$ ./hi\nHello World\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink114\").click(function(e){\n            e.preventDefault();\n            $(\"#showable114\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.14) Use the \nhead\n command to view the first \n20\n lines of the file \nsample_1.fastq\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember your \nbest\n friend!\n\n\n\n\n\n\nMore\n\n\n\n\nUse \nman\n to find out what option you need to add to display a given number of \nlines\n.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink117\").click(function(e){\n            e.preventDefault();\n            $(\"#showable117\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable117\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink117\").text(\"More\");\n            } else {\n                $(\"#showablelink117\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink116\").click(function(e){\n            e.preventDefault();\n            $(\"#showable116\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ head -20 sample_1.fastq\n@IRIS:7:1:17:394#0/1\nGTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n+IRIS:7:1:17:394#0/1\naaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n@IRIS:7:1:17:800#0/1\nGGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n+IRIS:7:1:17:800#0/1\nababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n@IRIS:7:1:17:1757#0/1\nTTTTCTCGACGATTTCCACTCCTGGTCNACGAATCC\n+IRIS:7:1:17:1757#0/1\naaaaaa``aaa`aaaa_^a```]][Z[DY^XYV^_Y\n@IRIS:7:1:17:1479#0/1\nCATATTGTAGGGTGGATCTCGAAAGATATGAAAGAT\n+IRIS:7:1:17:1479#0/1\nabaaaaa`a```^aaaaa`_]aaa`aaa__a_X]``\n@IRIS:7:1:17:150#0/1\nTGATGTACTATGCATATGAACTTGTATGCAAAGTGG\n+IRIS:7:1:17:150#0/1\nabaabaa`aaaaaaa^ba_]]aaa^aaaaa_^][aa\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink118\").click(function(e){\n            e.preventDefault();\n            $(\"#showable118\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.15) Use the \ntail\n command to view the last \n8\n lines of the file \nsample_1.fastq\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nIts very much like \nhead\n.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink120\").click(function(e){\n            e.preventDefault();\n            $(\"#showable120\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\ntail -8 sample_1.fastq\n@IRIS:7:32:731:717#0/1\nTAATAATTGGAGCCAAATCATGAATCAAAGGACATA\n+IRIS:7:32:731:717#0/1\nababbababbab]abbaa`babaaabbb`bbbabbb\n@IRIS:7:32:731:1228#0/1\nCTGATGCCGAGGCACGCCGTTAGGCGCGTGCTGCAG\n+IRIS:7:32:731:1228#0/1\n`aaaaa``aaa`a``a`^a`a`a_[a_a`a`aa`__\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink121\").click(function(e){\n            e.preventDefault();\n            $(\"#showable121\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.16) Use the \ngrep\n command to find out all the lines in \nmoby.txt\n that contain the word \n\"Ahab\"\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nOne might say we are 'looking for the \npattern\n \"Ahab\"'\n\n\n\n\n\n\nMore\n\n\n\n\n$ man grep\n...\nSYNOPSIS\n       grep [OPTIONS] PATTERN [FILE...]\n...\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink124\").click(function(e){\n            e.preventDefault();\n            $(\"#showable124\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable124\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink124\").text(\"More\");\n            } else {\n                $(\"#showablelink124\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink123\").click(function(e){\n            e.preventDefault();\n            $(\"#showable123\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ grep Ahab moby.txt\n\nWant to see what whaling is, eh? Have ye clapped eye on Captain Ahab?\n\n\nWho is Captain Ahab, sir?\n\n\nAye, aye, I thought so. Captain Ahab is the Captain of this ship.\n\n... AND MUCH MUCH MORE ...\n\n\n\n\nIf you want to know how many lines are in the output of the above command you can \"pipe\" it \ninto the \nwc -l\n command:\n\n\n$ grep Ahab moby.txt | wc -l\n491\n\n\n\n\nwhich shows that there are \n491\n lines in \nmoby.txt\n that contain the word Ahab.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink125\").click(function(e){\n            e.preventDefault();\n            $(\"#showable125\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.17) Use the \ngrep\n command to find out all the lines in \nexpectations.txt\n that contain the \nword \"the\" with a case insensitive search (it should count \"the\" \"The\" \"THE\" \"tHe\" etcetera)\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nOne might say we are \nignoring case\n.\n\n\n\n\n\n\nMore\n\n\n\n\n$ man grep\n...\n       -i, --ignore-case\n              Ignore case distinctions in both the PATTERN and the input files.  (-i is specified by POSIX.)\n...\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink128\").click(function(e){\n            e.preventDefault();\n            $(\"#showable128\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable128\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink128\").text(\"More\");\n            } else {\n                $(\"#showablelink128\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink127\").click(function(e){\n            e.preventDefault();\n            $(\"#showable127\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \n-i\n flag to \ngrep\n to make it perform case insensitive search:\n\n\n$ grep -i the expectations.txt\nThe Project Gutenberg EBook of Great Expectations, by Charles Dickens\nThis eBook is for the use of anyone anywhere at no cost and with\nre-use it under the terms of the Project Gutenberg License included\n[Project Gutenberg Editor's Note: There is also another version of\n... AND MUCH MUCH MORE ...\n\n\n\n\nAgain, \"pipe\" the output to \nwc -l\n to count the number of lines:\n\n\n$ grep -i the expectations.txt  | wc -l\n8165\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink129\").click(function(e){\n            e.preventDefault();\n            $(\"#showable129\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n4.18) Use the \ngzip\n command to compress the file \nsample_1.fastq\n. Use \ngunzip\n to decompress it \nback to the original contents.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse the above commands along with \nman\n and \nls\n to see what happens to the file.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink131\").click(function(e){\n            e.preventDefault();\n            $(\"#showable131\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nCheck the file size of sample_1.fastq before compressing it:\n\n\n# check filesize\n$ ls -l sample_1.fastq\n-rw-r--r-- 1 training01 training 90849644 Jun 14 20:03 sample_1.fastq\n\n# compress it (takes a few seconds)\n$ gzip sample_1.fastq\n\n# check filesize (Note: its name changed)\n$ ls -l sample_1.fastq.gz\n-rw-r--r-- 1 training01 training 26997595 Jun 14 20:03 sample_1.fastq.gz\n\n# decompress it\n$ gunzip sample_1.fastq.gz\n\n$ ls -l sample_1.fastq\n-rw-r--r-- 1 training01 training 90849644 Jun 14 20:03 sample_1.fastq\n\n\n\n\nYou will see that when it was compressed it is \n26997595\n bytes in size, making it about \n0.3\n times the size of the \noriginal file.\n\n\nNote\n: in the above section the lines starting with \n#\n are comments so don't need to be copied but if you\ndo then they wont do anything.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink132\").click(function(e){\n            e.preventDefault();\n            $(\"#showable132\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nTopic 5: Pipes, output redirection and shell scripts\n\n\nIn this section we will cover a lot of the more advanced Unix concepts; it is here where you will start to see\nthe power of Unix.  I say \nstart\n because this is only the \"tip of the iceberg\".\n\n\nDuration\n: 50 minutes. \n\n\nRelevant commands\n: \nwc\n, \npaste\n, \ngrep\n, \nsort\n, \nuniq\n, \nnano\n, \ncut\n\n\nNote\n: this section uses data obtained from DNA/RNA sequencer.  Sequencers take DNA/RNA fragments\nfrom an organism being studied and read the basepairs (A,C,T,G) that make up each fragment.  Each sequence of basepairs (from one fragment)\nis known as a \nread\n and is often stored in FastQ format, a text format which includes an ID, Annotation, Sequence \nand Quality Score.\n\n\n\n\n\n\n\n5.1) How many \nreads\n are contained in the file \nsample_1.fastq\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nExamine some of the file to work out how many lines each \nread\n takes up.\n\n\n\n\n\n\nMore\n\n\n\n\nCount the number of lines\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink135\").click(function(e){\n            e.preventDefault();\n            $(\"#showable135\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable135\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink135\").text(\"More\");\n            } else {\n                $(\"#showablelink135\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink134\").click(function(e){\n            e.preventDefault();\n            $(\"#showable134\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nWe can answer this question by counting the number of lines in the file and dividing by 4:\n\n\n$ wc -l sample_1.fastq\n3000000\n\n\n\n\nAnswer\n: There are \n3000000\n lines in the file representing \n750000\n reads.\n\n\nIf you want to do simple arithmetic at the command line then you can use the \"basic calculator\" \ncalled \nbc\n:\n\n\n$ echo \n3000000 / 4\n | bc\n750000\n\n\n\n\nNote\n: that the vertical bar character \"|\" is the Unix pipe (and is often \ncalled the \"pipe symbol\"). It is used for connecting the output of one command into the input of \nanother command. We'll see more examples soon.\n\n\n\nbc\n is suitable for small calculations, but it becomes cumbersome for more complex examples. If \nyou want to do more sophisticated calculations then we recommend to use a more general purpose \nprogramming language (such as Python etcetera).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink136\").click(function(e){\n            e.preventDefault();\n            $(\"#showable136\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.2) How many reads in \nsample_1.fastq\n contain the sequence \nGATTACA\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck out exercise 4.16\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink138\").click(function(e){\n            e.preventDefault();\n            $(\"#showable138\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse \ngrep\n to find all the lines that contain \nGATTACA\n and \"pipe\" the output to \nwc -l\n to count them:\n\n\n$ grep GATTACA sample_1.fastq | wc -l\n1119\n\n\n\n\nAnswer\n: \n1119\n\n\nIf you are unsure about the possibility of upper and lower case characters then consider using \nthe \n-i\n (ignore case option for grep).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink139\").click(function(e){\n            e.preventDefault();\n            $(\"#showable139\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.3) On what line numbers do the sequences containing \nGATTACA\n occur?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nWe are looking for the \nline numbers\n.\n\n\n\n\n\n\nMore\n\n\n\n\nCheck out the manpage for \ngrep\n and/or \nnl\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink142\").click(function(e){\n            e.preventDefault();\n            $(\"#showable142\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable142\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink142\").text(\"More\");\n            } else {\n                $(\"#showablelink142\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink141\").click(function(e){\n            e.preventDefault();\n            $(\"#showable141\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nYou can use the \n-n\n flag to grep to make it prefix each line with a line number:\n\n\nAnswer 1\n: \n\n\n$ grep -n GATTACA sample_1.fastq\n5078:AGGAAGATTACAACTCCAAGACACCAAACAAATTCC\n7170:AACTACAAAGGTCAGGATTACAAGCTCTTGCCCTTC\n8238:ATAGTTTTTTCGATTACATGGATTATATCTGTTTGC\n... AND MUCH MUCH MORE ...\n\n\n\n\nAnswer 2\n: Or you can use the \nnl\n command to number each line of sample_1.fastq and then search for \nGATTACA\n \nin the numbered lines:\n\n\n$ nl sample_1.fastq | grep GATTACA\n  5078  AGGAAGATTACAACTCCAAGACACCAAACAAATTCC\n  7170  AACTACAAAGGTCAGGATTACAAGCTCTTGCCCTTC\n  8238  ATAGTTTTTTCGATTACATGGATTATATCTGTTTGC\n... AND MUCH MUCH MORE ...\n\n\n\n\nJust the line numbers\n:\n\n\nIf you just want to see the line numbers then you can \"pipe\" the output of the above command into \n\ncut -f 1\n:\n\n\n$ nl sample_1.fastq | grep GATTACA | cut -f 1\n  5078\n  7170\n  8238\n... AND MUCH MUCH MORE ...\n\n\n\n\ncut\n will remove certain columns from the input; in this case it will remove all except column 1\n(a.k.a. field 1, hence the \n-f 1\n option)\n\n\n$ grep -n GATTACA sample_1.fastq | cut -d: -f 1\n5078\n7170\n8238\n... AND MUCH MUCH MORE ...\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink143\").click(function(e){\n            e.preventDefault();\n            $(\"#showable143\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.4) Use the \nnl\n command to print each line of \nsample_1.fastq\n with its corresponding line \nnumber at the beginning.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck answer to 5.3.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink145\").click(function(e){\n            e.preventDefault();\n            $(\"#showable145\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ nl sample_1.fastq\n     1  @IRIS:7:1:17:394#0/1\n     2  GTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n     3  +IRIS:7:1:17:394#0/1\n     4  aaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n     5  @IRIS:7:1:17:800#0/1\n     6  GGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n     7  +IRIS:7:1:17:800#0/1\n     8  ababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n... AND MUCH MUCH MORE ...\n\n\n\n\nThere are a lot of lines in that file so this command might take a while to print all its output. \nIf you get tired of looking at the output you can kill the command with \ncontrol-c\n (hold the \n\ncontrol\n key down and simultaneously press the \"\nc\n\" character).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink146\").click(function(e){\n            e.preventDefault();\n            $(\"#showable146\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.5) Redirect the output of the previous command to a file called \nsample_1.fastq.nl\n. Check \nthe first \n20\n lines of \nsample_1.fastq.nl\n with the \nhead\n command. Use the \nless\n command to \ninteractively view the contents of \nsample_1.fastq.nl\n (use the arrow keys to navigate up and down, \n\nq\n to quit and '\n/\n' to search). Use the search facility in less to find occurrences of \n\nGATTACA\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nOk that one was tough, \n FILENAME\n is how you do it if you didn't break out an internet search for \n\"redirect the output in Unix\"\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink148\").click(function(e){\n            e.preventDefault();\n            $(\"#showable148\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ nl sample_1.fastq \n sample_1.fastq.nl\n\n\n\n\nThe greater-than sign \"\n\" is the file redirection operator. It causes the standard output of the \ncommand on the left-hand-side to be written to the file on the right-hand-side.\n\n\nYou should notice that the above command is much faster than printing the output to the screen. \nThis is because writing to disk can be performed much more quickly than rendering the output on \na terminal.\n\n\nTo check that the first 20 lines of the file look reasonable you can use the \nhead\n command like so:\n\n\n$ head -20 sample_1.fastq.nl\n     1  @IRIS:7:1:17:394#0/1\n     2  GTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n     3  +IRIS:7:1:17:394#0/1\n     4  aaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n     5  @IRIS:7:1:17:800#0/1\n     6  GGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n     7  +IRIS:7:1:17:800#0/1\n     8  ababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n...\n\n\n\n\nThe \nless\n command allows you to interactively view a file. The arrow keys move the page up and \ndown. You can search using the '\n/\n' followed by the search term. You can quit by pressing \"\nq\n\". Note \nthat the \nless\n command is used by default to display man pages.\n\n\n$ less sample_1.fastq.nl\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink149\").click(function(e){\n            e.preventDefault();\n            $(\"#showable149\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.6) The four-lines-per-read format of FASTQ is cumbersome to deal with. Often it would be \npreferable if we could convert it to tab-separated-value (TSV) format, such that each read appears \non a single line with each of its fields separated by tabs. Use the following command to convert \nsample_1.fastq into TSV format:\n\n\n\n\n$ cat sample_1.fastq | paste - - - - \n sample_1.tsv\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink150\").click(function(e){\n            e.preventDefault();\n            $(\"#showable150\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe \n'-'\n (dash) character has a special meaning when used in place of a file; it means use the standard\ninput instead of a real file.  Note: while it is fairly common in most Unix programs, not all will support it.\n\n\nThe \npaste\n command is useful for merging multiple files together line-by-line, such that the \nNth\n \nline from each file is joined together into one line in the output, separated by default with a \n\ntab\n character. In the above example we give paste 4 copies of the contents of \nsample_1.fastq\n, \nwhich causes it to join consecutive groups of 4 lines from the file into one line of output.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink151\").click(function(e){\n            e.preventDefault();\n            $(\"#showable151\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.7) Do you expect the output of the following command to produce the same output as above? and why?\n\n\n\n\n$ paste sample_1.fastq sample_1.fastq sample_1.fastq sample_1.fastq \n sample_1b.tsv\n\n\n\n\nTry it, see what ends up in sample_1b.tsv (maybe use \nless\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink152\").click(function(e){\n            e.preventDefault();\n            $(\"#showable152\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nUse \nless\n to examine it.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink153\").click(function(e){\n            e.preventDefault();\n            $(\"#showable153\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nAnswer\n: No, in the second instance we get 4 copies of each line.\n\n\nWhy\n: In the first command \npaste\n will use the input file (standard input) 4 times since the \ncat\n \ncommand will only give one copy of the file to \npaste\n, where as, in the second command \npaste\n will open \nthe file 4 times.  Note: this is quite confusing and is not necessory to remember; its just an interesting\nside point.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink154\").click(function(e){\n            e.preventDefault();\n            $(\"#showable154\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.8) Check that \nsample_1.tsv\n has the correct number of lines. Use the \nhead\n command to view \nthe first \n20\n lines of the file.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nRemember the \nwc\n command.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink156\").click(function(e){\n            e.preventDefault();\n            $(\"#showable156\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nWe can count the number of lines in \nsample_1.tsv\n using \nwc\n:\n\n\n$ wc -l sample_1.tsv\n\n\n\n\nThe output should be \n750000\n as expected (1/4 of the number of lines in sample_1.fastq).\n\n\nTo view the first \n20\n lines of \nsample_1.tsv\n use the \nhead\n command:\n\n\n$ head -20 sample_1.tsv\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink157\").click(function(e){\n            e.preventDefault();\n            $(\"#showable157\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.9) Use the \ncut\n command to print out the second column of \nsample_1.tsv\n. Redirect the \noutput to a file called \nsample_1.dna.txt\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nSee exercise 5.3 (for cut) and 5.5 (redirection)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink159\").click(function(e){\n            e.preventDefault();\n            $(\"#showable159\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nThe file sample_1.tsv is in column format. The cut command can be used to select certain columns \nfrom the file. The DNA sequences appear in column 2, we select that column using the -f 2 flag \n(the f stands for \"field\").\n\n\ncut -f 2 sample_1.tsv \n sample_1.dna.txt\n\n\n\n\nCheck that the output file looks reasonable using \nhead\n or \nless\n.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink160\").click(function(e){\n            e.preventDefault();\n            $(\"#showable160\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.10) Use the \nsort\n command to sort the lines of \nsample_1.dna.txt\n and redirect the output to \n\nsample_1.dna.sorted.txt\n. Use \nhead\n to look at the first few lines of the output file. You should \nsee a lot of repeated sequences of As.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nUse \nman\n (sort) and see exercise 5.5 (redirection)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink162\").click(function(e){\n            e.preventDefault();\n            $(\"#showable162\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ sort sample_1.dna.txt \n sample_1.dna.sorted.txt\n\n\n\n\nRunning \nhead\n on the output file reveals that there are duplicate DNA sequences in the input FASTQ \nfile.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink163\").click(function(e){\n            e.preventDefault();\n            $(\"#showable163\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.11) Use the \nuniq\n command to remove duplicate consecutive lines from \nsample_1.dna.sorted.txt\n, \nredirect the result to \nsample_1.dna.uniq.txt\n. Compare the number of lines in sample1_dna.txt to \nthe number of lines in \nsample_1.dna.uniq.txt\n.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nI am pretty sure you have already used \nman\n (or just guessed how to use \nuniq\n).  You're also a gun at \nredirection now.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink165\").click(function(e){\n            e.preventDefault();\n            $(\"#showable165\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\n$ uniq sample_1.dna.sorted.txt \n sample_1.dna.uniq.txt\n\n\n\n\nCompare the outputs of:\n\n\n$ wc -l sample_1.dna.sorted.txt\n750000\n$ wc -l sample_1.dna.uniq.txt\n614490\n\n\n\n\nView the contents of \nsample_1.dna.uniq.txt\n to check that the duplicate DNA sequences have been \nremoved.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink166\").click(function(e){\n            e.preventDefault();\n            $(\"#showable166\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.12) Can you modify the command from above to produce \nonly\n those sequences of DNA which were \nduplicated in \nsample_1.dna.sorted.txt\n?\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheckout the \nuniq\n manpage\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink168\").click(function(e){\n            e.preventDefault();\n            $(\"#showable168\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nHint\n\n\n\n\nLook at the man page for uniq.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink169\").click(function(e){\n            e.preventDefault();\n            $(\"#showable169\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nUse the \n-d\n flag to \nuniq\n to print out only the duplicated lines from the file:\n\n\n$ uniq -d sample_1.dna.sorted.txt \n sample_1.dna.dup.txt\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink170\").click(function(e){\n            e.preventDefault();\n            $(\"#showable170\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.13) Write a \nshell pipeline\n which will print the number of duplicated DNA sequences in \nsample_1.fastq.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nThat is, \npiping\n most of the commands you used above instead of redirecting to file\n\n\n\n\n\n\nMore\n\n\n\n\nI.e. 6 commands (\ncat\n, \npaste\n, \ncut\n, \nsort\n, \nuniq\n, \nwc\n)\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink173\").click(function(e){\n            e.preventDefault();\n            $(\"#showable173\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable173\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink173\").text(\"More\");\n            } else {\n                $(\"#showablelink173\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink172\").click(function(e){\n            e.preventDefault();\n            $(\"#showable172\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nFinally we can 'pipe' all the pieces together into a sophisticated pipeline which starts with a \nFASTQ file and ends with a list of duplicated DNA sequences:\n\n\nAnswer\n:\n\n\n$ cat sample_1.fastq | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\n56079\n\n\n\n\nThe output file should have \n56079\n lines.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink174\").click(function(e){\n            e.preventDefault();\n            $(\"#showable174\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.14) (Advanced) Write a shell script which will print the number of duplicated DNA sequences \nin sample_1.fastq.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nCheck out the \nsleepy\n file (with \ncat\n or \nnano\n); there is a bit of magic on the first line that you will need. \n\n\nYou also need to tell bash that this file can be executed (check out \nchmod\n command).\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink176\").click(function(e){\n            e.preventDefault();\n            $(\"#showable176\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nPut the answer to \n5.13\n into a file called \nsample_1_dups.sh\n (or whatever you want). Use \nnano\n to \ncreate the file. \n\n\nAnswer\n: the contents of the file will look like this:\n\n\n#!/bin/bash\n\ncat sample_1.fastq | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\n\n\n\n\nNote\n: the first line has special meaning.  If it starts with '\n#!\n' (Hash \nthen exclamation mark) then it tells bash this file is a script that can be interpreted.  The command \n(including full path) used to intepret the script is placed right after the magic code.\n\n\n\nGive everyone execute permissions on the file with chmod:\n\n\n$ chmod +x sample_1_dups.sh \n\n\n\n\nYou can run the script like so:\n\n\n$ ./sample_1_dups.sh\n\n\n\n\nIf all goes well the script should behave in exactly the same way as the answer to 5.13.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink177\").click(function(e){\n            e.preventDefault();\n            $(\"#showable177\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.15) (Advanced) Modify your shell script so that it accepts the name of the input FASTQ file \nas a command line parameter.\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nShell scripts can refer to command line arguments by their position using special variables called \n\n$0\n, \n$1\n, \n$2\n and so on. \n\n\n\n\n\n\nMore\n\n\n\n\n$0\n refers to the name of the script as it was called on the command line. \n\n$1\n refers to the first command line argument, and so on.\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink180\").click(function(e){\n            e.preventDefault();\n            $(\"#showable180\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable180\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink180\").text(\"More\");\n            } else {\n                $(\"#showablelink180\").text(\"Less\");\n            }\n        });\n    });\n    \n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink179\").click(function(e){\n            e.preventDefault();\n            $(\"#showable179\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\nAnswer\n\n\n\n\nCopy the shell script from \n5.14\n into a new file:\n\n\n$ cp sample_1_dups.sh fastq_dups.sh\n\n\n\n\nEdit the new shell script file and change it to use the command line parameters:\n\n\n#!/bin/bash\n\ncat $1 | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\n\n\n\n\nYou can run the new script like so:\n\n\n$ ./fastq_dups.sh sample_1.fastq\n\n\n\n\nIn the above example the script takes \nsample_1.fastq\n as input and prints the number of duplicated \nsequences as output.\n\n\nA better Answer\n:\n\n\nIdeally we would write our shell script to be more robust. At the moment it just assumes there \nwill be at least one command line argument. However, it would be better to check and produce an \nerror message if insufficient arguments were given:\n\n\n#!/bin/bash\nif [ $# -eq 1 ]; then\n    cat $1 | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\nelse\n    echo \nUsage: $0 \nfastq_filename\n\n    exit 1\nfi\n\n\n\n\nThe '\nif ...; then\n' line means: do the following line(s) ONLY if the \n...\n (called condition) bit is true.\n\n\nThe '\nelse\n' line means: otherwise do the following line(s) instead.  Note: it is optional.\n\n\nThe '\nfi\n' line means: this marks the end of the current \nif\n or \nelse\n section.\n\n\nThe '\n[ $# -eq 1 ]\n' part is the condition:\n\n\n\n\n$#\n: is a special shell variable that indicates how many command line arguments were given. \n\n\n-eq\n: checks if the numbers on either side of it are equal.\n\n\n1\n: is a number one\n\n\n\n\nSpaces in conditions\n:\nBash is VERY picky about the spaces within the conditions; if you get it wrong it will just behave strangely \n(without warning).  You MUST put a space near the share brackets and between each part of the condition!\n\n\n\nSo in words our script is saying \"if user provided 1 filename, then count the duplicates, otherwise print an error\".\n\n\nExit-status\n:\nIt is a Unix standard that when the user provides incorrect commandline arguments we print a usage message \nand return a *non-zero* exit status.  The *exit status* is a standard way for other programs to know if\nour program ran correctly; 0 means everything went as expected, any other number is an error.  If you don't\nprovide an *exit ..* line then it automatically returns a 0 for you.\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink181\").click(function(e){\n            e.preventDefault();\n            $(\"#showable181\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\n\n\n\n\n\n\n5.16) (Advanced) Modify your shell script so that it accepts zero or more FASTQ files on the \ncommand line argument and outputs the number of duplicated DNA sequences in each file.\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\nWe can add a loop to our script to accept multiple input FASTQ files:\n\n\n#!/bin/bash\nfor file in $@; do\n    dups=$(cat $file | paste - - - - | cut -f 2 | sort | uniq -d | wc -l)\n    echo \n$file $dups\n\ndone\n\n\n\n\nThere's a lot going on in this script.\n\n\nThe \n$@\n is a sequence of all command line arguments.\n\n\nThe '\nfor ...; do\n' (a.k.a. for loop) iterates over that sequence one argument at a time, assigning the current argument in \nthe sequence to the variable called \nfile\n.\n\n\nThe \n$(...)\n allow us to capture the output of another command (in-place of the \n...\n).  In this \ncase we capture the output of the pipeline and save it to the variable called \ndups\n.\n\n\nIf you had multiple FASTQ files available you could run the script like so:\n\n\n./fastq_dups.sh sample_1.fastq sample_2.fastq sample_3.fastq\n\n\n\n\nAnd it would produce output like:\n\n\nsample_1.fastq 56079\nsample_2.fastq XXXXX\nsample_3.fastq YYYYY\n\n\n\n\n\n\n\n\n\n\n\n    $(document).ready(function(){\n        $(\"#showablelink183\").click(function(e){\n            e.preventDefault();\n            $(\"#showable183\").toggleClass(\"showable-hidden\");\n        });\n    });\n    \n\n\nFinished\n\n\nWell done, you learnt a lot over the last 5 topics and you should be proud of your achievement; it \nwas a lot to take in.\n\n\nFrom here you should be comfortable around the Unix command line and ready to take on the HPC \nWorkshop.\n\n\nYou will no-doubt forget a lot of what you learnt here so I encourage you to save a link to this \nworkshop for later reference.\n\n\nThank you for your attendance, please don't forget to complete the training survey and give it\nback to the workshop facilitators.", 
            "title": "Introduction to Unix"
        }, 
        {
            "location": "/tutorials/unix/#introduction-to-unix", 
            "text": "A hands-on-workshop covering the basics of the Unix/Linux command line interface", 
            "title": "Introduction to Unix"
        }, 
        {
            "location": "/tutorials/unix/#introduction", 
            "text": "Before we commence the hands-on part of this workshop we will first give a short 30 minute talk to introduce the Unix concepts. \nThe  sides  are available if you would like.  Additionally the following reference material is available for later\nuse.    Reference Material", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/unix/#why-use-unix", 
            "text": "Powerful : Unix computers are typically very powerful in comparision to your desktop/laptop computers.\n  Additionally they don't typically use a Graphical User Interface which can free up much resources for actual\n  computing.  Big data : Unix programs are designed to handle large data sets  Flexible : Small programs that can be arranged in many ways to solve your problems  Automation : Scripting allows you to do many tasks in one step and repeat steps many times  Pipelines : Unix programs are designed to be 'chained' together to form long multi-step pipelines  Science Software : Lots of Scientific software is designed to run in a Unix environment", 
            "title": "Why use unix"
        }, 
        {
            "location": "/tutorials/unix/#user-interface", 
            "text": "The Unix interface is a text-based command driven one; often known as a Command Line Interface (CLI).  This means \nthat you control it by issuing (i.e. typing) commands at the command prompt.  Consequently, the Mouse does not perform\nany function in the unix environment.", 
            "title": "User interface"
        }, 
        {
            "location": "/tutorials/unix/#command-prompt", 
            "text": "The command prompt is the first thing you see when you connect to a Unix Computer.  It's purpose is to receive the next\ncommand from you, the user.   There are several parts that make up the command prompt:   Time : the time (when the last command finished)  Username : the username that you are logged in as  Hostname : the name of the computer that your are connected to  Current working directory : the current position within the file system that your are working.  More to follow  Prompt : this is simply a sign to the user that the computer is ready to accept the next command    From this point forward in this document, the command prompt will be simply represented as a '$' rather than\nthe full command prompt as shown above.  When copying and pasting commands you should NOT copy the '$' sign.", 
            "title": "Command prompt"
        }, 
        {
            "location": "/tutorials/unix/#command-line", 
            "text": "Below is an example command with various flags and options.   There are a number of parts which may be included in a command; each is separated by one of more 'white-space' characters (i.e. space, tab):   Command : this is the name of the program (command) that you want to run  Flag : these turn on (or off) specific features in the program.  They consist of a dash (-) followed by\n  a single character.  Long flag : same as flag except they are generally two dashes (--) followed by a word (or two)  Option : set the value of a configurable option.  They are a flag (or long flag) followed by a value  Anonymous options : these are one or more options that are specified in the required order  Quoted value : if you need to specify a space (or tab) in an option then you will need to use double (\") or \n  single (') quotes on each side of the value.", 
            "title": "Command line"
        }, 
        {
            "location": "/tutorials/unix/#file-system", 
            "text": "The file-system of a unix computer can be thought of as an up-side-down tree.  The top most directory has a special name\ncalled 'root'; it contains all files and directories that are on the computer system.  It is represented by a single \nslash (/).  The figure below shows an example file system with directories (black outline boxes) and files (grey dashed \nboxes).   At the top level we have one file (settings) and one directory (home).  Inside the home directory we have two directories\n(user1 and user2) and so on.", 
            "title": "File system"
        }, 
        {
            "location": "/tutorials/unix/#absolute-file-names", 
            "text": "Absolute file names are a single unique name for each file and directory within the computer.  They start with the slash (/)\ncharacter and follow all the parent directories above the file/directory.   Absolute file name :  /settings   Absolute file name :  /home/user1/file01.txt   Absolute file name :  /home/user2     Note : the final slash is not needed (but generally doesn't hurt if it is present).", 
            "title": "Absolute file names"
        }, 
        {
            "location": "/tutorials/unix/#current-working-directory", 
            "text": "The  current working directory  is the current location within the file system that you are currently using. \nWhen you first login to a unix computer it will begin with the current working directory set to your home directory, that \nis, a place that is unique to you and generally nobody else will have access to it.   Remember from earlier that the current working directory is shown in the command prompt.", 
            "title": "Current working directory"
        }, 
        {
            "location": "/tutorials/unix/#relative-file-names", 
            "text": "Relative file names are a short cut to writing file names that are shorter.  The difference between an absolute file\nname is that relative file names do NOT begin with a slash.   If your current working directory is set to  /home  you can leave this part from the beginning of the filename.  Relative file name :  user1/muscle.fq  (Note: the absence of the leading slash)  Special file names :  There are a few further short cuts for typing relative file names:   ~  (Tilde): is a short cut to your home directory  .  (dot): is a short cut for the current directory  ..  (2x dot): means the parent (or one directory up) from current directory  ...  (3x dot): does not mean anything (a got-ya for new users).  If you want 2 directories up then chain two \ndouble dot's  e.g.  ../..     Note : the special file names above can be used within absolute and relative file name and used multiple times.   Now, if the current working directory is changed to  /home/user2  the relative path to muscle.fq is different.  Relative file name :  ../user1/muscle.fq     (function(w,d,u){if(!w.$){w._delayed=true;console.info(\"Delaying JQuery calls\");w.readyQ=[];w.bindReadyQ=[];function p(x,y){if(x==\"ready\"){w.bindReadyQ.push(y);}else{w.readyQ.push(x);}};var a={ready:p,bind:p};w.$=w.jQuery=function(f){if(f===d||f===u){return a}else{p(f)}}}})(window,document)  \n    $(document).ready(function(){\n        $(\"#showablelink0\").click(function(e){\n            e.preventDefault();\n            $(\"#showable0\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Relative file names"
        }, 
        {
            "location": "/tutorials/unix/#topic-1-remote-log-in", 
            "text": "In this topic we will learn how to connect to a  Unix  computer via a method called  SSH  and run a few basic commands.", 
            "title": "Topic 1: Remote log in"
        }, 
        {
            "location": "/tutorials/unix/#connecting-to-a-unix-computer", 
            "text": "To begin this workshop you will need to connect to an HPC.  Today we will use the  BARCOO .  The computer called  barcoo.vlsci.unimelb.edu.au   is the \none that coordinates all the HPCs tasks.  Server details :   host :  barcoo.vlsci.unimelb.edu.au  port :  22    username :  trainXX  password :  (provided at workshop)     Mac OS X / Linux   Both Mac OS X and Linux come with a version of ssh (called OpenSSH) that can be used from the command line.  To use OpenSSH you must \nfirst start a terminal program on your computer.  On OS X the standard terminal is called Terminal, and it is installed by default. \nOn Linux there are many popular terminal programs including: xterm, gnome-terminal, konsole (if you aren't sure, then xterm is a good \ndefault).  When you've started the terminal you should see a command prompt.  To log into  BARCOO , for example, type this command at \nthe prompt and press return (where the word username is replaced with your  BARCOO  username):  $ ssh   trainXX @ barcoo.vlsci.unimelb.edu.au  The same procedure works for any other machine where you have an account except that if your Unix computer uses a port other than 22 you will\nneed to specify the port by adding the option  -p PORT  with PORT substituted with the port number.  You may be presented with a message along the lines of:  The authenticity of host 'lims-hpc-m.latrobe.edu.au (131.172.36.150)' can't be  established.\n...\nAre you sure you want to continue connecting (yes/no)?  Although you should never ignore a warning, this particular one is nothing to be concerned about; type  yes  and then  press enter . \nIf all goes well you will be asked to enter your password.  Assuming you type the correct username and password the system should \nthen display a welcome message, and then present you with a Unix prompt.  If you get this far then you are ready to start entering \nUnix commands and thus begin using the remote computer.     \n    $(document).ready(function(){\n        $(\"#showablelink1\").click(function(e){\n            e.preventDefault();\n            $(\"#showable1\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Windows   On Microsoft Windows (Vista, 7, 8) we recommend that you use the PuTTY ssh client.  PuTTY (putty.exe) can be downloaded \nfrom this web page:  http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html  Documentation for using PuTTY is here:  http://www.chiark.greenend.org.uk/~sgtatham/putty/docs.html  When you start PuTTY you should see a window which looks something like this:   To connect to  BARCOO  you should enter  barcoo.vlsci.unimelb.edu.au  into the box entitled \"Host Name (or IP address)\" \nand  22  in the port, \nthen click on the Open button. All of the settings should remain the same as they were when PuTTY started (which should be the \nsame as they are in the picture above).  In some circumstances you will be presented with a window entitled PuTTY Security Alert. It will say something along the lines \nof  \"The server's host key is not cached in the registry\" . This is nothing to worry about, and you should agree to continue (by \nclicking on Yes). You usually see this message the first time you try to connect to a particular remote computer.  If all goes well, a terminal window will open, showing a prompt with the text  \"login as:\" . An example terminal window is shown \nbelow. You should type your  BARCOO  username and press enter. After entering your username you will be prompted for your \npassword. Assuming you type the correct username and password the system should then display a welcome message, and then \npresent you with a Unix prompt. If you get this far then you are ready to start entering Unix commands and thus begin using \nthe remote computer.      \n    $(document).ready(function(){\n        $(\"#showablelink2\").click(function(e){\n            e.preventDefault();\n            $(\"#showable2\").toggleClass(\"showable-hidden\");\n        });\n    });\n      Note : for security reasons ssh will not display any characters when you enter your password. This \ncan be confusing because it appears as if your typing is not recognised by the computer. Don\u2019t be \nalarmed; type your password in and press return at the end.  BARCOO  is a high performance computer for  VLSCI  Users.  Logging in connects your local computer \n(e.g. laptop) to  BARCOO , and allows you to type commands into the Unix prompt which are run on \nthe HPC, and have the results displayed on your local screen.  You will be allocated a training account on  BARCOO  for the duration of the workshop. Your \nusername and password will be supplied at the start of the workshop.  Log out of  BARCOO , and log back in again (to make sure you can repeat the process).  All the remaining parts assume that you are logged into  BARCOO  over ssh.", 
            "title": "Connecting to a Unix computer"
        }, 
        {
            "location": "/tutorials/unix/#exercises", 
            "text": "1.1) When you've logged into the Unix server, run the following commands and see what they do:    who  whoami  date  cal  hostname  /vlsci/TRAINING/shared/Intro_to_Unix /hi      \n    $(document).ready(function(){\n        $(\"#showablelink3\").click(function(e){\n            e.preventDefault();\n            $(\"#showable3\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer    who : displays a list of the users who are currently using this Unix computer.  whoami : displays your username (i.e. they person currently logged in).  date : displays the current date and time.  cal : displays a calendar on the terminal.  It can be configured to display more than just \nthe current month.  hostname : displays the name of the computer we are logged in to.  /vlsci/TRAINING/shared/Intro_to_Unix /hi : displays the text \"Hello World\"      \n    $(document).ready(function(){\n        $(\"#showablelink4\").click(function(e){\n            e.preventDefault();\n            $(\"#showable4\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Exercises"
        }, 
        {
            "location": "/tutorials/unix/#topic-2-exploring-your-home-directory", 
            "text": "In this topic we will learn how to \"look\" at the filesystem and further expand our repertoire of Unix commands.   Duration : 20 minutes.   Relevant commands :  ls ,  pwd ,  echo ,  man  Your home directory contains your own private working space.  Your  current working directory  is automatically set \nto your  home  directory when you log into a Unix computer.    2.1) Use the  ls  command to list the files in your  home  directory.  How many files are there?      Hint   Literally, type  ls  and press the  ENTER  key.     \n    $(document).ready(function(){\n        $(\"#showablelink6\").click(function(e){\n            e.preventDefault();\n            $(\"#showable6\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ ls\nexp01  file01  muscle.fq  When running the  ls  command with no options it will list files in your current working directory.  The place \nwhere you start when you first login is your  HOME  directory.  Answer : 3 (exp01, file01 and muscle.fq)     \n    $(document).ready(function(){\n        $(\"#showablelink7\").click(function(e){\n            e.preventDefault();\n            $(\"#showable7\").toggleClass(\"showable-hidden\");\n        });\n    });\n       The above answer is not quite correct.  There are a number of  hidden  files in your home directory as well.    2.2) What  flag  might you use to display  all  files with the  ls  command?  How many files are really there?      Hint   Take the  all  quite literally.    More   Type  ls --all  and press the  ENTER  key.     \n    $(document).ready(function(){\n        $(\"#showablelink10\").click(function(e){\n            e.preventDefault();\n            $(\"#showable10\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable10\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink10\").text(\"More\");\n            } else {\n                $(\"#showablelink10\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink9\").click(function(e){\n            e.preventDefault();\n            $(\"#showable9\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer 1 :  --all  (or  -a ) flag  Now you should see several files in your home directory whose names all begin with a dot. All these files are \ncreated automatically for your user account. They are mostly configuration options for various programs including \nthe shell. It is safe to ignore them for the moment.  $ ls --all\n.              .bash_logout    exp01    .lesshst\n..             .bash_profile   file01   muscle.fq\n.bash_history  .bashrc         .kshrc   .viminfo  There are two trick files here; namely  .  and  ..  which are not real files but instead, shortcuts.   .  is a shortcut\nfor the current directory and  ..  a shortcut for the directory above the current one.  Answer 2 : 10 files (don't count  .  and  .. )     \n    $(document).ready(function(){\n        $(\"#showablelink11\").click(function(e){\n            e.preventDefault();\n            $(\"#showable11\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.3) What is the full path name of your  home  directory?      Hint   Remember your  Current Working Directory  start's in your  home  directory.    More   Try a shortened version of  print working directory     \n    $(document).ready(function(){\n        $(\"#showablelink14\").click(function(e){\n            e.preventDefault();\n            $(\"#showable14\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable14\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink14\").text(\"More\");\n            } else {\n                $(\"#showablelink14\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink13\").click(function(e){\n            e.preventDefault();\n            $(\"#showable13\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You can find out the full path name of the current working directory with the  pwd  command. Your home directory \nwill look something like this:  $ pwd\n/home/trainingXX  Answer :  /vlsci/TRAINING/trainXX  where  XX  is replaced by some 2 digit sequence.  Alternate method :\nYou can also find out the name of your home directory by printing the value of the  $HOME  shell variable:  echo $HOME     \n    $(document).ready(function(){\n        $(\"#showablelink15\").click(function(e){\n            e.preventDefault();\n            $(\"#showable15\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.4) Run  ls  using the long-list flag ( -l ), how did the output change?      Hint   Run  ls -l     \n    $(document).ready(function(){\n        $(\"#showablelink17\").click(function(e){\n            e.preventDefault();\n            $(\"#showable17\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer : it changed the output to place 1 file/directory per line.  It also added some extra information\nabout each.  $ ls -l\ntotal 32\ndrwxr-x--- 2 training01 training 2048 Jun 14 11:28 exp01\n-rw-r----- 1 training01 training   97 Jun 14 11:28 file01\n-rw-r----- 1 training01 training 2461 Jun 14 11:28 muscle.fq  Details :  drwxr-x--- 2 training01 training 2048 Jun 14 11:28 exp01\n\\--------/ ^ \\--------/ \\------/ \\--/ \\----------/ \\---/\npermission |  username   group   size    date       name\n       /---^---\\\n       linkcount  Where:   permissions : made up of 4 parts: file type, user perms, group perms and other perms  filetype : 1 character,  d  = directory and  -  regular file  user  permissions: 3 characters,  r  = read,  w  = write,  x  = execute and  -  no permission  group  permissions: same as user except for users within the owner group  other  permissions: same as user except for users that are not in either user  or   group    username : the user who  owns  this file/directory  group : the group name who  owns  this file/directory  size : the number of bytes this file/directory takes to store on disk  date : the date and time when this file/directory was  last edited  name : name of the file  linkcount : technical detail which represents the number of links this file has in the file system (safe to ignore)      \n    $(document).ready(function(){\n        $(\"#showablelink18\").click(function(e){\n            e.preventDefault();\n            $(\"#showable18\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.5) What type of file is  exp01  and  muscle.fq ?      Hint   Check the output from the  ls -l .     \n    $(document).ready(function(){\n        $(\"#showablelink20\").click(function(e){\n            e.preventDefault();\n            $(\"#showable20\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer :   exp01 : Directory (given the 'd' as the first letter of its permissions)  muscle.fq : Regular File (given the '-')      \n    $(document).ready(function(){\n        $(\"#showablelink21\").click(function(e){\n            e.preventDefault();\n            $(\"#showable21\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.6) Who has permission to  read ,  write  and  execute  your  home  directory?      Hint   You can also give  ls  a filename as the first option.    More   ls -l  will show you the contents of the  CWD ; how might you see the contents of the  parent  directory? (remember\nthe slides)     \n    $(document).ready(function(){\n        $(\"#showablelink24\").click(function(e){\n            e.preventDefault();\n            $(\"#showable24\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable24\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink24\").text(\"More\");\n            } else {\n                $(\"#showablelink24\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink23\").click(function(e){\n            e.preventDefault();\n            $(\"#showable23\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   If you pass the  -l  flag to ls it will display a \"long\" listing of file information including file permissions.  There are various ways you could find out the permissions on your home directory.  Method 1 : given we know the  CWD  is our home directory.  $ ls -l ..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...  The  ..  refers to the parent directory.  Method 2 : using $HOME.  This works no matter what our  CWD  is set to.   You could list the permissions of all files and directories in the parent directory of your home:  $ ls -l $HOME/..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...  In this case we use the shell variable to refer to our home directory.  Method 3 : using  ~  (tilde) shortcut  You may also refer to your home directory using the  ~  (tilde) character:  $ ls -l ~/..\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 trainingXY\n...  All 3 of the methods above mean the same thing.  You will see a list of files and directories in the parent directory of your home directory. One of them will \nbe the name of your home directory, something like  trainXX .  Where  XX  is replaced by a two digit string  Altername : using the  -a  flag and looking at the  .  (dot) special file.  $ ls -la\n...\ndrwxr-x--- 4 trainingXY training  512 Feb  9 14:18 .\n...  Answer :  drwxr-x---   You : read (see filenames), write (add, delete files), execute (change your CWD to this directory).  Training users : read, execute  Everyone else : No access   Discussion on Permissions :  The permission string is  \"drwxr-x---\" . The  d  means it is a directory. The  rwx  means that the owner of the directory \n(your user account) can  read ,  write  and  execute  the directory. Execute permissions on a directory means that you \ncan  cd  into the directory. The  r-x  means that anyone in the same user group as  training  can read or execute the \ndirectory. The  ---  means that nobody else (other users on the system) can do anything with the directory.     \n    $(document).ready(function(){\n        $(\"#showablelink25\").click(function(e){\n            e.preventDefault();\n            $(\"#showable25\").toggleClass(\"showable-hidden\");\n        });\n    });\n        man  is for manual : and it will be your best friend!  Manual pages include a lot of detail about a command and its available flags/options.  It should be your first (or second) \nport of call when you are trying to work out what a command or option does.  You can scroll  up  and  down  in the man page using the  arrow  keys.  You can search in the man page using the forward \nslash followed by the search text followed by the  ENTER  key. e.g. \ntype  /group  and press  ENTER  to search for the word  group .  Press  n  key to find next \noccurrence of  group  etc.  You can  quit  the man page by pressing  q .      2.7) Use the  man  command to find out what the  -h  flag does for  ls      Hint   Give  ls  as an option to  man  command.    More   man ls     \n    $(document).ready(function(){\n        $(\"#showablelink28\").click(function(e){\n            e.preventDefault();\n            $(\"#showable28\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable28\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink28\").text(\"More\");\n            } else {\n                $(\"#showablelink28\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink27\").click(function(e){\n            e.preventDefault();\n            $(\"#showable27\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the following command to view the  man  page for  ls :  $ man ls  Answer : You should discover that the  -h  option prints file sizes in human readable format  -h, --human-readable\n              with -l, print sizes in human readable format (e.g., 1K 234M 2G)     \n    $(document).ready(function(){\n        $(\"#showablelink29\").click(function(e){\n            e.preventDefault();\n            $(\"#showable29\").toggleClass(\"showable-hidden\");\n        });\n    });\n         2.8) Use the  -h , how did the output change of  muscle.fq ?      Hint   Don't forget the  -l  option too.    More   Run  ls -lh     \n    $(document).ready(function(){\n        $(\"#showablelink32\").click(function(e){\n            e.preventDefault();\n            $(\"#showable32\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable32\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink32\").text(\"More\");\n            } else {\n                $(\"#showablelink32\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink31\").click(function(e){\n            e.preventDefault();\n            $(\"#showable31\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ ls -lh\n...\n-rw-r----- 1 training01 training 2.5K Jun 14 11:28 muscle.fq  Answer : it changed the output so the  filesize  of  muscle.fq  is now  2.5K  instead of  2461     \n    $(document).ready(function(){\n        $(\"#showablelink33\").click(function(e){\n            e.preventDefault();\n            $(\"#showable33\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 2: Exploring your home directory"
        }, 
        {
            "location": "/tutorials/unix/#topic-3-exploring-the-file-system", 
            "text": "In this topic we will learn how to move around the filesystem and see what is there.  Duration : 30 minutes.   Relevant commands :  pwd ,  cd ,  ls ,  file    3.1) Print the value of your current working directory.      Answer   The  pwd  command prints the value of your current working directory.  $ pwd\n/home/training01     \n    $(document).ready(function(){\n        $(\"#showablelink35\").click(function(e){\n            e.preventDefault();\n            $(\"#showable35\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.2) List the contents of the root directory, called ' / ' (forward \nslash).      Hint   ls  expects one or more anonymous options which are the files/directories to list.     \n    $(document).ready(function(){\n        $(\"#showablelink37\").click(function(e){\n            e.preventDefault();\n            $(\"#showable37\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ ls /\napplications-merged  etc         media    root     tmp\nbin                  home        mnt      sbin     usr\nboot                 lib         oldhome  selinux  var\ndata                 lib64       opt      srv\ndev                  lost+found  proc     sys  Here we see that  ls  can take a filepath as its argument, which allows you to list the contents of directories \nother than your current working directory.     \n    $(document).ready(function(){\n        $(\"#showablelink38\").click(function(e){\n            e.preventDefault();\n            $(\"#showable38\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.3) Use the  cd  command to change your working directory to the root directory.  Did your prompt \nchange?      Hint   cd  expects a single option which is the directory to change to     \n    $(document).ready(function(){\n        $(\"#showablelink40\").click(function(e){\n            e.preventDefault();\n            $(\"#showable40\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  cd  command changes the value of your current working directory. To change to the root directory use the \nfollowing command:  $ cd /  Answer : Yes, it now says the CWD is  /  instead of  ~ .  Some people imagine that changing the working directory is akin to moving your focus within the file system. \nSo people often say \"move to\", \"go to\" or \"charge directory to\" when they want to change the working directory.  The root directory is special in Unix. It is the topmost directory in the whole file system.     \n    $(document).ready(function(){\n        $(\"#showablelink41\").click(function(e){\n            e.preventDefault();\n            $(\"#showable41\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Output on ERROR only : Many Unix commands will not produce any output if everything went well;  cd  is one\nsuch command.  However, it will get grumpy if something went wrong by way of an error message on-screen.     3.4) List the contents of the CWD and verify it matches the list in 3.2      Hint   ls     \n    $(document).ready(function(){\n        $(\"#showablelink43\").click(function(e){\n            e.preventDefault();\n            $(\"#showable43\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Assuming you have changed to the root directory then this can be achieved with  ls , or  ls -a  (for all files) or  ls -la  for a long listing of all files.  If you are not currently in the root directory then you can list its contents by passing it as an argument to ls:  $ ls\napplications-merged  etc         media    root     tmp\nbin                  home        mnt      sbin     usr\nboot                 lib         oldhome  selinux  var\ndata                 lib64       opt      srv\ndev                  lost+found  proc     sys  Answer : Yes, we got the same output as exercise 3.2     \n    $(document).ready(function(){\n        $(\"#showablelink44\").click(function(e){\n            e.preventDefault();\n            $(\"#showable44\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.5) Change your current working directory back to your home directory. What is the simplest Unix command that \nwill get you back to your home directory from anywhere else in the file system?      Hint   The answer to exercise 2.6 might give some hints on how to get back to the home directory    More   $HOME ,  ~ ,  /vlsci/TRAINING/trainXX  are all methods to name your home directory.  Yet there is a simpler method; the answer\nis buried in  man cd  however  cd  doesn't have its own manpage so you will need to search for it.     \n    $(document).ready(function(){\n        $(\"#showablelink47\").click(function(e){\n            e.preventDefault();\n            $(\"#showable47\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable47\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink47\").text(\"More\");\n            } else {\n                $(\"#showablelink47\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink46\").click(function(e){\n            e.preventDefault();\n            $(\"#showable46\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  cd  command to change your working directory to your home directory. There are a number of ways to refer \nto your home directory:  cd $HOME  is equivalent to:  cd ~  The simplest way to change your current working directory to your home directory is to run the  cd  command with \nno arguments:  Answer : the simplest for is cd with NO options.  cd  This is a special-case behaviour which is built into  cd  for convenience.     \n    $(document).ready(function(){\n        $(\"#showablelink48\").click(function(e){\n            e.preventDefault();\n            $(\"#showable48\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.6) Change your working directory to the following directory   /vlsci/TRAINING/shared/Intro_to_Unix     \n    $(document).ready(function(){\n        $(\"#showablelink49\").click(function(e){\n            e.preventDefault();\n            $(\"#showable49\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer :  cd  /vlsci/TRAINING/shared/Intro_to_Unix     \n    $(document).ready(function(){\n        $(\"#showablelink50\").click(function(e){\n            e.preventDefault();\n            $(\"#showable50\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.7) List the contents of that directory. How many files does it contain?      Hint   ls     \n    $(document).ready(function(){\n        $(\"#showablelink52\").click(function(e){\n            e.preventDefault();\n            $(\"#showable52\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You can do this with  ls  $ ls\nexpectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy  Answer : 7 files (expectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy)     \n    $(document).ready(function(){\n        $(\"#showablelink53\").click(function(e){\n            e.preventDefault();\n            $(\"#showable53\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.8) What kind of  file  is   /vlsci/TRAINING/shared/Intro_to_Unix /sleepy ?      Hint   Take the word  file  quite literally.    More   file sleepy     \n    $(document).ready(function(){\n        $(\"#showablelink56\").click(function(e){\n            e.preventDefault();\n            $(\"#showable56\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable56\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink56\").text(\"More\");\n            } else {\n                $(\"#showablelink56\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink55\").click(function(e){\n            e.preventDefault();\n            $(\"#showable55\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  file  command to get extra information about the contents of a file:  Assuming your current working directory is  /vlsci/TRAINING/shared/Intro_to_Unix  $ file sleepy\nBourne-Again shell script text executable  Otherwise specify the full path of sleepy:   $ file /vlsci/TRAINING/shared/Intro_to_Unix/sleepy\nBourne-Again shell script text executable   Answer : Bourne-Again shell script text executable  The \"Bourne-Again shell\" is more commonly known as BASH. The  file  command is telling us that sleepy \nis (probably) a shell script written in the language of BASH.  The file command uses various heuristics to guess the \"type\" of a file. If you want to know how it works \nthen read the Unix manual page like so:  man file     \n    $(document).ready(function(){\n        $(\"#showablelink57\").click(function(e){\n            e.preventDefault();\n            $(\"#showable57\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.9) What kind of  file  is    /vlsci/TRAINING/shared/Intro_to_Unix /hi ?      Hint   Take the word  file  quite literally.     \n    $(document).ready(function(){\n        $(\"#showablelink59\").click(function(e){\n            e.preventDefault();\n            $(\"#showable59\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the file command again. If you are in the same directory as  hi  then:  $ file hi\nELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux \n2.6.9, not stripped  Answer : ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux   This rather complicated output is roughly saying that the file called  hi  contains a binary executable \nprogram (raw instructions that the computer can execute directly).     \n    $(document).ready(function(){\n        $(\"#showablelink60\").click(function(e){\n            e.preventDefault();\n            $(\"#showable60\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.10) What are the file permissions of the following file and what do they mean?   /vlsci/TRAINING/shared/Intro_to_Unix /sleepy       Hint   Remember the  ls  command, and don't forget the  -l  flag     \n    $(document).ready(function(){\n        $(\"#showablelink62\").click(function(e){\n            e.preventDefault();\n            $(\"#showable62\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You can find the permissions of  sleepy  using the  ls  command with the  -l  flag. If you are in the same \ndirectory as  sleepy  then:  $ ls -l sleepy\n-rw-r--r-- 1 arobinson common 183 Feb  9 16:36 sleepy  Answer : The Answer is dependent on the computer you are connected too however will follow something like above. \nWe can see that this particular instance of sleepy is owned by the user arobinson, and is part of the common \nuser group. It is 183 bytes in size, and was last modified on the 9th of February at 4:36pm. The file is \nreadable to everyone, and write-able only to arobinson.  The digit '1' between the file permission string and \nthe owner indicates that there is one link to the file. The Unix file system allows files to be referred to \nby multiple \"links\". When you create a file it is referred to by one link, but you may add others later. For \nfuture reference: links are created with the  ln  command.     \n    $(document).ready(function(){\n        $(\"#showablelink63\").click(function(e){\n            e.preventDefault();\n            $(\"#showable63\").toggleClass(\"showable-hidden\");\n        });\n    });\n         3.11) Change your working directory back to your home directory ready for the next topic.      Hint   cd     \n    $(document).ready(function(){\n        $(\"#showablelink65\").click(function(e){\n            e.preventDefault();\n            $(\"#showable65\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You should know how to do this with the cd command:  cd     \n    $(document).ready(function(){\n        $(\"#showablelink66\").click(function(e){\n            e.preventDefault();\n            $(\"#showable66\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 3: Exploring the file system"
        }, 
        {
            "location": "/tutorials/unix/#topic-4-working-with-files-and-directories", 
            "text": "In this topic we will start to read, create, edit and delete files and directories.  Duration : 50 minutes.    Relevant commands :  mkdir ,  cp ,  ls ,  diff ,  wc ,  nano ,  mv ,  rm ,  rmdir ,  head ,  tail ,  grep ,  gzip ,  gunzip   Hint : Look at the commands above; you will need them roughly in order for this topic.  Use the  man \ncommand find out what they do, in particular the NAME, SYNOPSIS and DESCRIPTION sections.     4.1) In your home directory make a sub-directory called test.      Hint   You are trying to  make a directory , which of the above commands looks like a shortened version of this?    More   mkdir     \n    $(document).ready(function(){\n        $(\"#showablelink69\").click(function(e){\n            e.preventDefault();\n            $(\"#showable69\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable69\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink69\").text(\"More\");\n            } else {\n                $(\"#showablelink69\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink68\").click(function(e){\n            e.preventDefault();\n            $(\"#showable68\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Make sure you are in your home directory first. If not  cd  to your home directory.  Use the  mkdir  command to make new directories:  $ mkdir test  Use the  ls  command to check that the new directory was created.  $ ls\nexp01  file01  muscle.fq  test     \n    $(document).ready(function(){\n        $(\"#showablelink70\").click(function(e){\n            e.preventDefault();\n            $(\"#showable70\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.2) Copy all the files from the following directory into the newly created test directory.   /vlsci/TRAINING/shared/Intro_to_Unix      Hint   You are trying to  copy , which of the above commands looks like a shortened version of this?    More   $ man cp\n...\nSYNOPSIS\n       cp [OPTION]... [-T] SOURCE DEST\n...\nDESCRIPTION\n       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.  which means  cp  expects zero or more flags, a SOURCE file followed by a DEST file or directory      \n    $(document).ready(function(){\n        $(\"#showablelink73\").click(function(e){\n            e.preventDefault();\n            $(\"#showable73\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable73\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink73\").text(\"More\");\n            } else {\n                $(\"#showablelink73\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink72\").click(function(e){\n            e.preventDefault();\n            $(\"#showable72\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  cp  command to copy files.   Wildcards : You could copy them one-by-one, but that would be tedious, so use \nthe  *  wildcard to specify that you want to copy all the files.  There are a number of ways you could do this depending on how you specify the source and destination \npaths to  cp . You only need to perform one of these ways, but we show multiple ones for your reference.  Answer 1 : From your home directory:   $ cp /vlsci/TRAINING/shared/Intro_to_Unix/* test   Answer 2 : Change to the test directory and then copy (assuming you started in your home directory):   $ cd test\n$ cp /vlsci/TRAINING/shared/Intro_to_Unix/* .   In the example above the ' . ' (dot) character refers to the current working directory. It should be \nthe test subdirectory of your home directory.  Answer 3 : Change to the \\end{UNIX_TRAINING_FILES_PATH} directory and then copy:   cd /vlsci/TRAINING/shared/Intro_to_Unix/\ncp * ~/test   Remember that ~ is a shortcut reference to your home directory.     \n    $(document).ready(function(){\n        $(\"#showablelink74\").click(function(e){\n            e.preventDefault();\n            $(\"#showable74\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Note : This exercise assumes that the copy command from the previous exercise was successful.     4.3) Check that the file size of  expectations.txt  is the same in both the directory that you copied \nit from and the directory that you copied it to.      Hint   Remember  ls  can show you the file size (with one of its flags)    More   ls -l     \n    $(document).ready(function(){\n        $(\"#showablelink77\").click(function(e){\n            e.preventDefault();\n            $(\"#showable77\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable77\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink77\").text(\"More\");\n            } else {\n                $(\"#showablelink77\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink76\").click(function(e){\n            e.preventDefault();\n            $(\"#showable76\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use  ls -l  to check the size of files.  You could do this in many ways depending on the value of your working directory. We just show one possible \nway for each file:   $ ls -l /vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt\n\n$ ls -l ~/test/expectations.txt   From the output of the above commands you should be able to see the size of each file and check that they \nare the same.   Answer : They should each be  1033773  bytes  Alternate : Sometimes it is useful to get file sizes reported in more \"human friendly\" units than bytes. If this is \ntrue then try the  -h  option for ls:   $ ls -lh /vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt\n-rw-r--r-- 1 arobinson common 1010K Mar 26  2012 /vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt   In this case the size is reported in kilobytes as  1010K . Larger files are reported in megabytes, gigabytes \netcetera.     \n    $(document).ready(function(){\n        $(\"#showablelink78\").click(function(e){\n            e.preventDefault();\n            $(\"#showable78\").toggleClass(\"showable-hidden\");\n        });\n    });\n       Note : this exercise assumes your working directory is  ~/test ; if not run  cd ~/test    4.4) Check that the contents of expectations.txt are the same in both the directory that you copied \nit from and the directory that you copied it to.      Hint   What is the opposite of  same ?    More   diff erence     \n    $(document).ready(function(){\n        $(\"#showablelink81\").click(function(e){\n            e.preventDefault();\n            $(\"#showable81\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable81\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink81\").text(\"More\");\n            } else {\n                $(\"#showablelink81\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink80\").click(function(e){\n            e.preventDefault();\n            $(\"#showable80\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  diff  command to compare the contents of two files.   $ diff /vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt expectations.txt   If the two files are identical the  diff  command will NOT produce any output)  Answer : Yes, they are the same since no output was given.     \n    $(document).ready(function(){\n        $(\"#showablelink82\").click(function(e){\n            e.preventDefault();\n            $(\"#showable82\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.5) How many lines, words and characters are in expectations.txt?      Hint   Initialisms are key    More   w ord  c ount     \n    $(document).ready(function(){\n        $(\"#showablelink85\").click(function(e){\n            e.preventDefault();\n            $(\"#showable85\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable85\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink85\").text(\"More\");\n            } else {\n                $(\"#showablelink85\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink84\").click(function(e){\n            e.preventDefault();\n            $(\"#showable84\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  wc  (for \"word count\") to count the number of characters, lines and words in a file:  $ wc expectations.txt\n  20415  187465 1033773 expectations.txt  Answer : There are  20415  lines,  187465  words and  1033773  characters in expectations.txt.  To get just the line, word or character count:  $ wc -l expectations.txt\n20415 expectations.txt\n$ wc -w expectations.txt\n187465 expectations.txt\n$ wc -c expectations.txt\n1033773 expectations.txt     \n    $(document).ready(function(){\n        $(\"#showablelink86\").click(function(e){\n            e.preventDefault();\n            $(\"#showable86\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.6) Open  ~/test/expectations.txt  in the  nano  text editor, delete the first line of text, and \nsave your changes to the file. Exit  nano .      Hint   nano FILENAME  Once  nano  is open it displays some command hints along the bottom of the screen.    More   ^O  means hold the  Control  (or CTRL) key while pressing the  o .  Dispite what it displays, you need to type \nthe lower-case letter that follows the  ^  character.  WriteOut is another name for Save.     \n    $(document).ready(function(){\n        $(\"#showablelink89\").click(function(e){\n            e.preventDefault();\n            $(\"#showable89\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable89\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink89\").text(\"More\");\n            } else {\n                $(\"#showablelink89\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink88\").click(function(e){\n            e.preventDefault();\n            $(\"#showable88\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Take some time to play around with the  nano  text editor.  Nano  is a very simple text editor which is easy to use but limited in features. More powerful \neditors exist such as  vim  and  emacs , however they take a substantial amount of time to learn.     \n    $(document).ready(function(){\n        $(\"#showablelink90\").click(function(e){\n            e.preventDefault();\n            $(\"#showable90\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.7) Did the changes you made to  ~/test/expectations.txt  have any effect on    /vlsci/TRAINING/shared/Intro_to_Unix ? How can you tell if two files are the \nsame or different in their contents?      Hint   Remember exercise 4.4    More   Use  diff     \n    $(document).ready(function(){\n        $(\"#showablelink93\").click(function(e){\n            e.preventDefault();\n            $(\"#showable93\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable93\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink93\").text(\"More\");\n            } else {\n                $(\"#showablelink93\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink92\").click(function(e){\n            e.preventDefault();\n            $(\"#showable92\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use  diff  to check that the two files are different after you have made the change to the copy of  expectations.txt  in your  ~/test  directory.   diff ~/test/expectations.txt \\\n/vlsci/TRAINING/shared/Intro_to_Unix/expectations.txt   You could also use  ls  to check that the files have different sizes.     \n    $(document).ready(function(){\n        $(\"#showablelink94\").click(function(e){\n            e.preventDefault();\n            $(\"#showable94\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.8) In your  test  subdirectory, rename  expectations.txt  to  foo.txt .      Hint   Another way to think of it is  moving  it from  expectations.txt  to  foo.txt    More   mv  Use  man mv  if you need to work out how to use it.     \n    $(document).ready(function(){\n        $(\"#showablelink97\").click(function(e){\n            e.preventDefault();\n            $(\"#showable97\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable97\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink97\").text(\"More\");\n            } else {\n                $(\"#showablelink97\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink96\").click(function(e){\n            e.preventDefault();\n            $(\"#showable96\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  mv  command to rename the file:  $ mv expectations.txt foo.txt\n$ ls\nfoo.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy     \n    $(document).ready(function(){\n        $(\"#showablelink98\").click(function(e){\n            e.preventDefault();\n            $(\"#showable98\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.9) Rename foo.txt back to expectations.txt.      Answer   Use the  mv  command to rename the file:  $ mv foo.txt expectations.txt\n$ ls\nexpectations.txt  hello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy  Use  ls  to check that the file is in fact renamed.     \n    $(document).ready(function(){\n        $(\"#showablelink100\").click(function(e){\n            e.preventDefault();\n            $(\"#showable100\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.10) Remove the file  expectations.txt  from your  test  directory.      Hint   We are trying to  remove  a file, check the commands at the top of this topic.    More   rm     \n    $(document).ready(function(){\n        $(\"#showablelink103\").click(function(e){\n            e.preventDefault();\n            $(\"#showable103\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable103\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink103\").text(\"More\");\n            } else {\n                $(\"#showablelink103\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink102\").click(function(e){\n            e.preventDefault();\n            $(\"#showable102\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  rm  command to remove files (carefully):  $ rm expectations.txt\n$ ls\nhello.c  hi  jude.txt  moby.txt  sample_1.fastq  sleepy     \n    $(document).ready(function(){\n        $(\"#showablelink104\").click(function(e){\n            e.preventDefault();\n            $(\"#showable104\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.11) Remove the entire  test  directory and all the files within it.      Hint   We are trying to  remove a directory .    More   You could use  rmdir  but there is an easier way using just  rm  and a flag.     \n    $(document).ready(function(){\n        $(\"#showablelink107\").click(function(e){\n            e.preventDefault();\n            $(\"#showable107\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable107\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink107\").text(\"More\");\n            } else {\n                $(\"#showablelink107\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink106\").click(function(e){\n            e.preventDefault();\n            $(\"#showable106\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You could use the  rm  command to remove each file individually, and then use the  rmdir  command \nto remove the directory. Note that  rmdir  will only remove directories that are empty (i.e. do not \ncontain files or subdirectories).  A faster way is to pass the  -r  (for recursive) flag to  rm  to remove all the files and the \ndirectory in one go:  Logical Answer :  cd ~\nrm test/*\nrmdir test  Easier Answer :  cd ~\nrm -r test  Warning : Be very careful with  rm -r , it will remove all files \nand all subdirectories underneath the specified directory. This could be catastrophic if you do it \nin the wrong location! Now is a good moment to pause and think about file backup strategies.     \n    $(document).ready(function(){\n        $(\"#showablelink108\").click(function(e){\n            e.preventDefault();\n            $(\"#showable108\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.12) Recreate the test directory in your home directory and copy all the files from  /vlsci/TRAINING/shared/Intro_to_Unix  back into the test directory.      Hint   See exercises 4.1 and 4.2     \n    $(document).ready(function(){\n        $(\"#showablelink110\").click(function(e){\n            e.preventDefault();\n            $(\"#showable110\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Repeat exercises 4.1 and 4.2.   $ cd ~\n$ mkdir test\n$ cp /vlsci/TRAINING/shared/Intro_to_Unix/* test      \n    $(document).ready(function(){\n        $(\"#showablelink111\").click(function(e){\n            e.preventDefault();\n            $(\"#showable111\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.13) Change directories to  ~/test  and use the  cat  command to display the entire contents \nof the file  hello.c      Hint   Use  man  if you can't guess how it might work.     \n    $(document).ready(function(){\n        $(\"#showablelink113\").click(function(e){\n            e.preventDefault();\n            $(\"#showable113\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ cd ~/test\n$ cat hello.c\n#include  stdio.h \nint main(void) {\n    printf ( Hello World\\n );\n    return 0;\n}  hello.c  contains the source code of a C program. The compiled executable version of this code \nis in the file called  hi , which you can run like so:  $ ./hi\nHello World     \n    $(document).ready(function(){\n        $(\"#showablelink114\").click(function(e){\n            e.preventDefault();\n            $(\"#showable114\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.14) Use the  head  command to view the first  20  lines of the file  sample_1.fastq      Hint   Remember your  best  friend!    More   Use  man  to find out what option you need to add to display a given number of  lines .     \n    $(document).ready(function(){\n        $(\"#showablelink117\").click(function(e){\n            e.preventDefault();\n            $(\"#showable117\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable117\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink117\").text(\"More\");\n            } else {\n                $(\"#showablelink117\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink116\").click(function(e){\n            e.preventDefault();\n            $(\"#showable116\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ head -20 sample_1.fastq\n@IRIS:7:1:17:394#0/1\nGTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n+IRIS:7:1:17:394#0/1\naaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n@IRIS:7:1:17:800#0/1\nGGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n+IRIS:7:1:17:800#0/1\nababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n@IRIS:7:1:17:1757#0/1\nTTTTCTCGACGATTTCCACTCCTGGTCNACGAATCC\n+IRIS:7:1:17:1757#0/1\naaaaaa``aaa`aaaa_^a```]][Z[DY^XYV^_Y\n@IRIS:7:1:17:1479#0/1\nCATATTGTAGGGTGGATCTCGAAAGATATGAAAGAT\n+IRIS:7:1:17:1479#0/1\nabaaaaa`a```^aaaaa`_]aaa`aaa__a_X]``\n@IRIS:7:1:17:150#0/1\nTGATGTACTATGCATATGAACTTGTATGCAAAGTGG\n+IRIS:7:1:17:150#0/1\nabaabaa`aaaaaaa^ba_]]aaa^aaaaa_^][aa     \n    $(document).ready(function(){\n        $(\"#showablelink118\").click(function(e){\n            e.preventDefault();\n            $(\"#showable118\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.15) Use the  tail  command to view the last  8  lines of the file  sample_1.fastq      Hint   Its very much like  head .     \n    $(document).ready(function(){\n        $(\"#showablelink120\").click(function(e){\n            e.preventDefault();\n            $(\"#showable120\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   tail -8 sample_1.fastq\n@IRIS:7:32:731:717#0/1\nTAATAATTGGAGCCAAATCATGAATCAAAGGACATA\n+IRIS:7:32:731:717#0/1\nababbababbab]abbaa`babaaabbb`bbbabbb\n@IRIS:7:32:731:1228#0/1\nCTGATGCCGAGGCACGCCGTTAGGCGCGTGCTGCAG\n+IRIS:7:32:731:1228#0/1\n`aaaaa``aaa`a``a`^a`a`a_[a_a`a`aa`__     \n    $(document).ready(function(){\n        $(\"#showablelink121\").click(function(e){\n            e.preventDefault();\n            $(\"#showable121\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.16) Use the  grep  command to find out all the lines in  moby.txt  that contain the word \n\"Ahab\"      Hint   One might say we are 'looking for the  pattern  \"Ahab\"'    More   $ man grep\n...\nSYNOPSIS\n       grep [OPTIONS] PATTERN [FILE...]\n...     \n    $(document).ready(function(){\n        $(\"#showablelink124\").click(function(e){\n            e.preventDefault();\n            $(\"#showable124\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable124\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink124\").text(\"More\");\n            } else {\n                $(\"#showablelink124\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink123\").click(function(e){\n            e.preventDefault();\n            $(\"#showable123\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ grep Ahab moby.txt Want to see what whaling is, eh? Have ye clapped eye on Captain Ahab?  Who is Captain Ahab, sir?  Aye, aye, I thought so. Captain Ahab is the Captain of this ship. \n... AND MUCH MUCH MORE ...  If you want to know how many lines are in the output of the above command you can \"pipe\" it \ninto the  wc -l  command:  $ grep Ahab moby.txt | wc -l\n491  which shows that there are  491  lines in  moby.txt  that contain the word Ahab.     \n    $(document).ready(function(){\n        $(\"#showablelink125\").click(function(e){\n            e.preventDefault();\n            $(\"#showable125\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.17) Use the  grep  command to find out all the lines in  expectations.txt  that contain the \nword \"the\" with a case insensitive search (it should count \"the\" \"The\" \"THE\" \"tHe\" etcetera)\n.      Hint   One might say we are  ignoring case .    More   $ man grep\n...\n       -i, --ignore-case\n              Ignore case distinctions in both the PATTERN and the input files.  (-i is specified by POSIX.)\n...     \n    $(document).ready(function(){\n        $(\"#showablelink128\").click(function(e){\n            e.preventDefault();\n            $(\"#showable128\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable128\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink128\").text(\"More\");\n            } else {\n                $(\"#showablelink128\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink127\").click(function(e){\n            e.preventDefault();\n            $(\"#showable127\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  -i  flag to  grep  to make it perform case insensitive search:  $ grep -i the expectations.txt\nThe Project Gutenberg EBook of Great Expectations, by Charles Dickens\nThis eBook is for the use of anyone anywhere at no cost and with\nre-use it under the terms of the Project Gutenberg License included\n[Project Gutenberg Editor's Note: There is also another version of\n... AND MUCH MUCH MORE ...  Again, \"pipe\" the output to  wc -l  to count the number of lines:  $ grep -i the expectations.txt  | wc -l\n8165     \n    $(document).ready(function(){\n        $(\"#showablelink129\").click(function(e){\n            e.preventDefault();\n            $(\"#showable129\").toggleClass(\"showable-hidden\");\n        });\n    });\n         4.18) Use the  gzip  command to compress the file  sample_1.fastq . Use  gunzip  to decompress it \nback to the original contents.      Hint   Use the above commands along with  man  and  ls  to see what happens to the file.     \n    $(document).ready(function(){\n        $(\"#showablelink131\").click(function(e){\n            e.preventDefault();\n            $(\"#showable131\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Check the file size of sample_1.fastq before compressing it:  # check filesize\n$ ls -l sample_1.fastq\n-rw-r--r-- 1 training01 training 90849644 Jun 14 20:03 sample_1.fastq\n\n# compress it (takes a few seconds)\n$ gzip sample_1.fastq\n\n# check filesize (Note: its name changed)\n$ ls -l sample_1.fastq.gz\n-rw-r--r-- 1 training01 training 26997595 Jun 14 20:03 sample_1.fastq.gz\n\n# decompress it\n$ gunzip sample_1.fastq.gz\n\n$ ls -l sample_1.fastq\n-rw-r--r-- 1 training01 training 90849644 Jun 14 20:03 sample_1.fastq  You will see that when it was compressed it is  26997595  bytes in size, making it about  0.3  times the size of the \noriginal file.  Note : in the above section the lines starting with  #  are comments so don't need to be copied but if you\ndo then they wont do anything.     \n    $(document).ready(function(){\n        $(\"#showablelink132\").click(function(e){\n            e.preventDefault();\n            $(\"#showable132\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 4: Working with files and directories"
        }, 
        {
            "location": "/tutorials/unix/#topic-5-pipes-output-redirection-and-shell-scripts", 
            "text": "In this section we will cover a lot of the more advanced Unix concepts; it is here where you will start to see\nthe power of Unix.  I say  start  because this is only the \"tip of the iceberg\".  Duration : 50 minutes.   Relevant commands :  wc ,  paste ,  grep ,  sort ,  uniq ,  nano ,  cut  Note : this section uses data obtained from DNA/RNA sequencer.  Sequencers take DNA/RNA fragments\nfrom an organism being studied and read the basepairs (A,C,T,G) that make up each fragment.  Each sequence of basepairs (from one fragment)\nis known as a  read  and is often stored in FastQ format, a text format which includes an ID, Annotation, Sequence \nand Quality Score.    5.1) How many  reads  are contained in the file  sample_1.fastq ?      Hint   Examine some of the file to work out how many lines each  read  takes up.    More   Count the number of lines     \n    $(document).ready(function(){\n        $(\"#showablelink135\").click(function(e){\n            e.preventDefault();\n            $(\"#showable135\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable135\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink135\").text(\"More\");\n            } else {\n                $(\"#showablelink135\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink134\").click(function(e){\n            e.preventDefault();\n            $(\"#showable134\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   We can answer this question by counting the number of lines in the file and dividing by 4:  $ wc -l sample_1.fastq\n3000000  Answer : There are  3000000  lines in the file representing  750000  reads.  If you want to do simple arithmetic at the command line then you can use the \"basic calculator\" \ncalled  bc :  $ echo  3000000 / 4  | bc\n750000  Note : that the vertical bar character \"|\" is the Unix pipe (and is often \ncalled the \"pipe symbol\"). It is used for connecting the output of one command into the input of \nanother command. We'll see more examples soon.  bc  is suitable for small calculations, but it becomes cumbersome for more complex examples. If \nyou want to do more sophisticated calculations then we recommend to use a more general purpose \nprogramming language (such as Python etcetera).     \n    $(document).ready(function(){\n        $(\"#showablelink136\").click(function(e){\n            e.preventDefault();\n            $(\"#showable136\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.2) How many reads in  sample_1.fastq  contain the sequence  GATTACA ?      Hint   Check out exercise 4.16     \n    $(document).ready(function(){\n        $(\"#showablelink138\").click(function(e){\n            e.preventDefault();\n            $(\"#showable138\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use  grep  to find all the lines that contain  GATTACA  and \"pipe\" the output to  wc -l  to count them:  $ grep GATTACA sample_1.fastq | wc -l\n1119  Answer :  1119  If you are unsure about the possibility of upper and lower case characters then consider using \nthe  -i  (ignore case option for grep).     \n    $(document).ready(function(){\n        $(\"#showablelink139\").click(function(e){\n            e.preventDefault();\n            $(\"#showable139\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.3) On what line numbers do the sequences containing  GATTACA  occur?      Hint   We are looking for the  line numbers .    More   Check out the manpage for  grep  and/or  nl     \n    $(document).ready(function(){\n        $(\"#showablelink142\").click(function(e){\n            e.preventDefault();\n            $(\"#showable142\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable142\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink142\").text(\"More\");\n            } else {\n                $(\"#showablelink142\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink141\").click(function(e){\n            e.preventDefault();\n            $(\"#showable141\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   You can use the  -n  flag to grep to make it prefix each line with a line number:  Answer 1 :   $ grep -n GATTACA sample_1.fastq\n5078:AGGAAGATTACAACTCCAAGACACCAAACAAATTCC\n7170:AACTACAAAGGTCAGGATTACAAGCTCTTGCCCTTC\n8238:ATAGTTTTTTCGATTACATGGATTATATCTGTTTGC\n... AND MUCH MUCH MORE ...  Answer 2 : Or you can use the  nl  command to number each line of sample_1.fastq and then search for  GATTACA  \nin the numbered lines:  $ nl sample_1.fastq | grep GATTACA\n  5078  AGGAAGATTACAACTCCAAGACACCAAACAAATTCC\n  7170  AACTACAAAGGTCAGGATTACAAGCTCTTGCCCTTC\n  8238  ATAGTTTTTTCGATTACATGGATTATATCTGTTTGC\n... AND MUCH MUCH MORE ...  Just the line numbers :  If you just want to see the line numbers then you can \"pipe\" the output of the above command into  cut -f 1 :  $ nl sample_1.fastq | grep GATTACA | cut -f 1\n  5078\n  7170\n  8238\n... AND MUCH MUCH MORE ...  cut  will remove certain columns from the input; in this case it will remove all except column 1\n(a.k.a. field 1, hence the  -f 1  option)  $ grep -n GATTACA sample_1.fastq | cut -d: -f 1\n5078\n7170\n8238\n... AND MUCH MUCH MORE ...     \n    $(document).ready(function(){\n        $(\"#showablelink143\").click(function(e){\n            e.preventDefault();\n            $(\"#showable143\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.4) Use the  nl  command to print each line of  sample_1.fastq  with its corresponding line \nnumber at the beginning.      Hint   Check answer to 5.3.     \n    $(document).ready(function(){\n        $(\"#showablelink145\").click(function(e){\n            e.preventDefault();\n            $(\"#showable145\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ nl sample_1.fastq\n     1  @IRIS:7:1:17:394#0/1\n     2  GTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n     3  +IRIS:7:1:17:394#0/1\n     4  aaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n     5  @IRIS:7:1:17:800#0/1\n     6  GGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n     7  +IRIS:7:1:17:800#0/1\n     8  ababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n... AND MUCH MUCH MORE ...  There are a lot of lines in that file so this command might take a while to print all its output. \nIf you get tired of looking at the output you can kill the command with  control-c  (hold the  control  key down and simultaneously press the \" c \" character).     \n    $(document).ready(function(){\n        $(\"#showablelink146\").click(function(e){\n            e.preventDefault();\n            $(\"#showable146\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.5) Redirect the output of the previous command to a file called  sample_1.fastq.nl . Check \nthe first  20  lines of  sample_1.fastq.nl  with the  head  command. Use the  less  command to \ninteractively view the contents of  sample_1.fastq.nl  (use the arrow keys to navigate up and down,  q  to quit and ' / ' to search). Use the search facility in less to find occurrences of  GATTACA .      Hint   Ok that one was tough,   FILENAME  is how you do it if you didn't break out an internet search for \n\"redirect the output in Unix\"     \n    $(document).ready(function(){\n        $(\"#showablelink148\").click(function(e){\n            e.preventDefault();\n            $(\"#showable148\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ nl sample_1.fastq   sample_1.fastq.nl  The greater-than sign \" \" is the file redirection operator. It causes the standard output of the \ncommand on the left-hand-side to be written to the file on the right-hand-side.  You should notice that the above command is much faster than printing the output to the screen. \nThis is because writing to disk can be performed much more quickly than rendering the output on \na terminal.  To check that the first 20 lines of the file look reasonable you can use the  head  command like so:  $ head -20 sample_1.fastq.nl\n     1  @IRIS:7:1:17:394#0/1\n     2  GTCAGGACAAGAAAGACAANTCCAATTNACATTATG\n     3  +IRIS:7:1:17:394#0/1\n     4  aaabaa`]baaaaa_aab]D^^`b`aYDW]abaa`^\n     5  @IRIS:7:1:17:800#0/1\n     6  GGAAACACTACTTAGGCTTATAAGATCNGGTTGCGG\n     7  +IRIS:7:1:17:800#0/1\n     8  ababbaaabaaaaa`]`ba`]`aaaaYD\\\\_a``XT\n...  The  less  command allows you to interactively view a file. The arrow keys move the page up and \ndown. You can search using the ' / ' followed by the search term. You can quit by pressing \" q \". Note \nthat the  less  command is used by default to display man pages.  $ less sample_1.fastq.nl     \n    $(document).ready(function(){\n        $(\"#showablelink149\").click(function(e){\n            e.preventDefault();\n            $(\"#showable149\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.6) The four-lines-per-read format of FASTQ is cumbersome to deal with. Often it would be \npreferable if we could convert it to tab-separated-value (TSV) format, such that each read appears \non a single line with each of its fields separated by tabs. Use the following command to convert \nsample_1.fastq into TSV format:   $ cat sample_1.fastq | paste - - - -   sample_1.tsv     \n    $(document).ready(function(){\n        $(\"#showablelink150\").click(function(e){\n            e.preventDefault();\n            $(\"#showable150\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The  '-'  (dash) character has a special meaning when used in place of a file; it means use the standard\ninput instead of a real file.  Note: while it is fairly common in most Unix programs, not all will support it.  The  paste  command is useful for merging multiple files together line-by-line, such that the  Nth  \nline from each file is joined together into one line in the output, separated by default with a  tab  character. In the above example we give paste 4 copies of the contents of  sample_1.fastq , \nwhich causes it to join consecutive groups of 4 lines from the file into one line of output.     \n    $(document).ready(function(){\n        $(\"#showablelink151\").click(function(e){\n            e.preventDefault();\n            $(\"#showable151\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.7) Do you expect the output of the following command to produce the same output as above? and why?   $ paste sample_1.fastq sample_1.fastq sample_1.fastq sample_1.fastq   sample_1b.tsv  Try it, see what ends up in sample_1b.tsv (maybe use  less )     \n    $(document).ready(function(){\n        $(\"#showablelink152\").click(function(e){\n            e.preventDefault();\n            $(\"#showable152\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Use  less  to examine it.     \n    $(document).ready(function(){\n        $(\"#showablelink153\").click(function(e){\n            e.preventDefault();\n            $(\"#showable153\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Answer : No, in the second instance we get 4 copies of each line.  Why : In the first command  paste  will use the input file (standard input) 4 times since the  cat  \ncommand will only give one copy of the file to  paste , where as, in the second command  paste  will open \nthe file 4 times.  Note: this is quite confusing and is not necessory to remember; its just an interesting\nside point.     \n    $(document).ready(function(){\n        $(\"#showablelink154\").click(function(e){\n            e.preventDefault();\n            $(\"#showable154\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.8) Check that  sample_1.tsv  has the correct number of lines. Use the  head  command to view \nthe first  20  lines of the file.      Hint   Remember the  wc  command.     \n    $(document).ready(function(){\n        $(\"#showablelink156\").click(function(e){\n            e.preventDefault();\n            $(\"#showable156\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   We can count the number of lines in  sample_1.tsv  using  wc :  $ wc -l sample_1.tsv  The output should be  750000  as expected (1/4 of the number of lines in sample_1.fastq).  To view the first  20  lines of  sample_1.tsv  use the  head  command:  $ head -20 sample_1.tsv     \n    $(document).ready(function(){\n        $(\"#showablelink157\").click(function(e){\n            e.preventDefault();\n            $(\"#showable157\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.9) Use the  cut  command to print out the second column of  sample_1.tsv . Redirect the \noutput to a file called  sample_1.dna.txt .      Hint   See exercise 5.3 (for cut) and 5.5 (redirection)     \n    $(document).ready(function(){\n        $(\"#showablelink159\").click(function(e){\n            e.preventDefault();\n            $(\"#showable159\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   The file sample_1.tsv is in column format. The cut command can be used to select certain columns \nfrom the file. The DNA sequences appear in column 2, we select that column using the -f 2 flag \n(the f stands for \"field\").  cut -f 2 sample_1.tsv   sample_1.dna.txt  Check that the output file looks reasonable using  head  or  less .     \n    $(document).ready(function(){\n        $(\"#showablelink160\").click(function(e){\n            e.preventDefault();\n            $(\"#showable160\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.10) Use the  sort  command to sort the lines of  sample_1.dna.txt  and redirect the output to  sample_1.dna.sorted.txt . Use  head  to look at the first few lines of the output file. You should \nsee a lot of repeated sequences of As.      Hint   Use  man  (sort) and see exercise 5.5 (redirection)     \n    $(document).ready(function(){\n        $(\"#showablelink162\").click(function(e){\n            e.preventDefault();\n            $(\"#showable162\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ sort sample_1.dna.txt   sample_1.dna.sorted.txt  Running  head  on the output file reveals that there are duplicate DNA sequences in the input FASTQ \nfile.     \n    $(document).ready(function(){\n        $(\"#showablelink163\").click(function(e){\n            e.preventDefault();\n            $(\"#showable163\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.11) Use the  uniq  command to remove duplicate consecutive lines from  sample_1.dna.sorted.txt , \nredirect the result to  sample_1.dna.uniq.txt . Compare the number of lines in sample1_dna.txt to \nthe number of lines in  sample_1.dna.uniq.txt .      Hint   I am pretty sure you have already used  man  (or just guessed how to use  uniq ).  You're also a gun at \nredirection now.     \n    $(document).ready(function(){\n        $(\"#showablelink165\").click(function(e){\n            e.preventDefault();\n            $(\"#showable165\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   $ uniq sample_1.dna.sorted.txt   sample_1.dna.uniq.txt  Compare the outputs of:  $ wc -l sample_1.dna.sorted.txt\n750000\n$ wc -l sample_1.dna.uniq.txt\n614490  View the contents of  sample_1.dna.uniq.txt  to check that the duplicate DNA sequences have been \nremoved.     \n    $(document).ready(function(){\n        $(\"#showablelink166\").click(function(e){\n            e.preventDefault();\n            $(\"#showable166\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.12) Can you modify the command from above to produce  only  those sequences of DNA which were \nduplicated in  sample_1.dna.sorted.txt ?      Hint   Checkout the  uniq  manpage     \n    $(document).ready(function(){\n        $(\"#showablelink168\").click(function(e){\n            e.preventDefault();\n            $(\"#showable168\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Hint   Look at the man page for uniq.     \n    $(document).ready(function(){\n        $(\"#showablelink169\").click(function(e){\n            e.preventDefault();\n            $(\"#showable169\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Use the  -d  flag to  uniq  to print out only the duplicated lines from the file:  $ uniq -d sample_1.dna.sorted.txt   sample_1.dna.dup.txt     \n    $(document).ready(function(){\n        $(\"#showablelink170\").click(function(e){\n            e.preventDefault();\n            $(\"#showable170\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.13) Write a  shell pipeline  which will print the number of duplicated DNA sequences in \nsample_1.fastq.      Hint   That is,  piping  most of the commands you used above instead of redirecting to file    More   I.e. 6 commands ( cat ,  paste ,  cut ,  sort ,  uniq ,  wc )     \n    $(document).ready(function(){\n        $(\"#showablelink173\").click(function(e){\n            e.preventDefault();\n            $(\"#showable173\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable173\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink173\").text(\"More\");\n            } else {\n                $(\"#showablelink173\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink172\").click(function(e){\n            e.preventDefault();\n            $(\"#showable172\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Finally we can 'pipe' all the pieces together into a sophisticated pipeline which starts with a \nFASTQ file and ends with a list of duplicated DNA sequences:  Answer :  $ cat sample_1.fastq | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\n56079  The output file should have  56079  lines.     \n    $(document).ready(function(){\n        $(\"#showablelink174\").click(function(e){\n            e.preventDefault();\n            $(\"#showable174\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.14) (Advanced) Write a shell script which will print the number of duplicated DNA sequences \nin sample_1.fastq.      Hint   Check out the  sleepy  file (with  cat  or  nano ); there is a bit of magic on the first line that you will need.   You also need to tell bash that this file can be executed (check out  chmod  command).     \n    $(document).ready(function(){\n        $(\"#showablelink176\").click(function(e){\n            e.preventDefault();\n            $(\"#showable176\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Put the answer to  5.13  into a file called  sample_1_dups.sh  (or whatever you want). Use  nano  to \ncreate the file.   Answer : the contents of the file will look like this:  #!/bin/bash\n\ncat sample_1.fastq | paste - - - - | cut -f 2 | sort | uniq -d | wc -l  Note : the first line has special meaning.  If it starts with ' #! ' (Hash \nthen exclamation mark) then it tells bash this file is a script that can be interpreted.  The command \n(including full path) used to intepret the script is placed right after the magic code.  Give everyone execute permissions on the file with chmod:  $ chmod +x sample_1_dups.sh   You can run the script like so:  $ ./sample_1_dups.sh  If all goes well the script should behave in exactly the same way as the answer to 5.13.     \n    $(document).ready(function(){\n        $(\"#showablelink177\").click(function(e){\n            e.preventDefault();\n            $(\"#showable177\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.15) (Advanced) Modify your shell script so that it accepts the name of the input FASTQ file \nas a command line parameter.      Hint   Shell scripts can refer to command line arguments by their position using special variables called  $0 ,  $1 ,  $2  and so on.     More   $0  refers to the name of the script as it was called on the command line.  $1  refers to the first command line argument, and so on.     \n    $(document).ready(function(){\n        $(\"#showablelink180\").click(function(e){\n            e.preventDefault();\n            $(\"#showable180\").toggleClass(\"showable-hidden\");\n            if ($(\"#showable180\").hasClass(\"showable-hidden\")) {\n                $(\"#showablelink180\").text(\"More\");\n            } else {\n                $(\"#showablelink180\").text(\"Less\");\n            }\n        });\n    });\n         \n    $(document).ready(function(){\n        $(\"#showablelink179\").click(function(e){\n            e.preventDefault();\n            $(\"#showable179\").toggleClass(\"showable-hidden\");\n        });\n    });\n        Answer   Copy the shell script from  5.14  into a new file:  $ cp sample_1_dups.sh fastq_dups.sh  Edit the new shell script file and change it to use the command line parameters:  #!/bin/bash\n\ncat $1 | paste - - - - | cut -f 2 | sort | uniq -d | wc -l  You can run the new script like so:  $ ./fastq_dups.sh sample_1.fastq  In the above example the script takes  sample_1.fastq  as input and prints the number of duplicated \nsequences as output.  A better Answer :  Ideally we would write our shell script to be more robust. At the moment it just assumes there \nwill be at least one command line argument. However, it would be better to check and produce an \nerror message if insufficient arguments were given:  #!/bin/bash\nif [ $# -eq 1 ]; then\n    cat $1 | paste - - - - | cut -f 2 | sort | uniq -d | wc -l\nelse\n    echo  Usage: $0  fastq_filename \n    exit 1\nfi  The ' if ...; then ' line means: do the following line(s) ONLY if the  ...  (called condition) bit is true.  The ' else ' line means: otherwise do the following line(s) instead.  Note: it is optional.  The ' fi ' line means: this marks the end of the current  if  or  else  section.  The ' [ $# -eq 1 ] ' part is the condition:   $# : is a special shell variable that indicates how many command line arguments were given.   -eq : checks if the numbers on either side of it are equal.  1 : is a number one   Spaces in conditions :\nBash is VERY picky about the spaces within the conditions; if you get it wrong it will just behave strangely \n(without warning).  You MUST put a space near the share brackets and between each part of the condition!  So in words our script is saying \"if user provided 1 filename, then count the duplicates, otherwise print an error\".  Exit-status :\nIt is a Unix standard that when the user provides incorrect commandline arguments we print a usage message \nand return a *non-zero* exit status.  The *exit status* is a standard way for other programs to know if\nour program ran correctly; 0 means everything went as expected, any other number is an error.  If you don't\nprovide an *exit ..* line then it automatically returns a 0 for you.     \n    $(document).ready(function(){\n        $(\"#showablelink181\").click(function(e){\n            e.preventDefault();\n            $(\"#showable181\").toggleClass(\"showable-hidden\");\n        });\n    });\n         5.16) (Advanced) Modify your shell script so that it accepts zero or more FASTQ files on the \ncommand line argument and outputs the number of duplicated DNA sequences in each file.      Answer   We can add a loop to our script to accept multiple input FASTQ files:  #!/bin/bash\nfor file in $@; do\n    dups=$(cat $file | paste - - - - | cut -f 2 | sort | uniq -d | wc -l)\n    echo  $file $dups \ndone  There's a lot going on in this script.  The  $@  is a sequence of all command line arguments.  The ' for ...; do ' (a.k.a. for loop) iterates over that sequence one argument at a time, assigning the current argument in \nthe sequence to the variable called  file .  The  $(...)  allow us to capture the output of another command (in-place of the  ... ).  In this \ncase we capture the output of the pipeline and save it to the variable called  dups .  If you had multiple FASTQ files available you could run the script like so:  ./fastq_dups.sh sample_1.fastq sample_2.fastq sample_3.fastq  And it would produce output like:  sample_1.fastq 56079\nsample_2.fastq XXXXX\nsample_3.fastq YYYYY     \n    $(document).ready(function(){\n        $(\"#showablelink183\").click(function(e){\n            e.preventDefault();\n            $(\"#showable183\").toggleClass(\"showable-hidden\");\n        });\n    });", 
            "title": "Topic 5: Pipes, output redirection and shell scripts"
        }, 
        {
            "location": "/tutorials/unix/#finished", 
            "text": "Well done, you learnt a lot over the last 5 topics and you should be proud of your achievement; it \nwas a lot to take in.  From here you should be comfortable around the Unix command line and ready to take on the HPC \nWorkshop.  You will no-doubt forget a lot of what you learnt here so I encourage you to save a link to this \nworkshop for later reference.  Thank you for your attendance, please don't forget to complete the training survey and give it\nback to the workshop facilitators.", 
            "title": "Finished"
        }
    ]
}